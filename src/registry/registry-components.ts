import type { Registry } from "shadcn/schema"

/**
 * Este arquivo define os metadados para os componentes de UI do projeto.
 * Cada objeto no array representa um componente e suas propriedades, como nome, tipo, descrição,
 * autor, dependências e caminhos de arquivo. Essas informações são usadas pelo processo
 * de construção do registro para gerar arquivos como `index.tsx` e `registry.autogenerated.json`.
 */
export const components: Registry["items"] = [
  /**
   * Componente `banner`:
   * Um componente de banner.
   */
  {
    name: "banner",
    type: "registry:component",
    description: "A banner component.",
    title: "banner",
    author: "<author> <<authorUrl>>",
    dependencies: [],
    registryDependencies: [
      "badge",
      "button",
      "<registryBaseUrl>/container.json",
      "<registryBaseUrl>/utils.json",
    ],
    files: [
      {
        path: "components/layout/banner/index.tsx",
        type: "registry:component",
        target: "src/components/layout/banner/index.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/banner",
  },
  /**
   * Componente `container`:
   * Um componente de container.
   */
  {
    name: "container",
    type: "registry:component",
    description: "A container component.",
    title: "container",
    author: "<author> <<authorUrl>>",
    dependencies: [],
    registryDependencies: ["<registryBaseUrl>/utils.json"],
    files: [
      {
        path: "components/layout/container/index.tsx",
        type: "registry:component",
        target: "src/components/layout/container/index.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/container",
  },
  /**
   * Componente `footer-01`:
   * Um componente de footer-01.
   */
  {
    name: "footer-01",
    type: "registry:component",
    description: "A footer-01 component.",
    title: "footer",
    author: "<author> <<authorUrl>>",
    dependencies: [],
    registryDependencies: ["<registryBaseUrl>/utils.json"],
    files: [
      {
        path: "components/layout/footer/footer-01.tsx",
        type: "registry:component",
        target: "src/components/layout/footer/footer-01.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/footer#footer-01",
  },
  /**
   * Componente `container`:
   * Um componente de container.
   */
  {
    name: "icons",
    type: "registry:component",
    description: "A icons component.",
    title: "icons",
    author: "<author> <<authorUrl>>",
    files: [
      {
        path: "components/layout/icons/index.tsx",
        type: "registry:component",
        target: "src/components/layout/icons/index.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/icons",
  },
  /**
   * Componente `social-icon-link`:
   * Um componente de social-icon-link.
   */
  {
    name: "social-icon-link",
    type: "registry:component",
    description: "A social-icon-link component.",
    title: "social-icon-link",
    author: "<author> <<authorUrl>>",
    dependencies: [],
    registryDependencies: ["<registryBaseUrl>/utils.json"],
    files: [
      {
        path: "components/layout/social/social-icon-link.tsx",
        type: "registry:component",
        target: "src/components/layout/social/social-icon-link.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/social#social-icon-link",
  },
  /**
   * Componente `tailwind-indicator`:
   * Um indicador visual para ambientes de desenvolvimento que mostra o breakpoint atual do Tailwind CSS.
   */
  {
    name: "tailwind-indicator",
    type: "registry:component",
    description: "A tailwind-indicator component.",
    title: "tailwind-indicator",
    author: "<author> <<authorUrl>>",
    files: [
      {
        path: "components/dev/tailwind-indicator.tsx",
        type: "registry:component",
        target: "src/components/dev/tailwind-indicator.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/dev/tailwind-indicator",
  },
  /**
   * Componente `theme-toggle`:
   * Um botão para alternar entre os temas claro, escuro e do sistema, utilizando `next-themes` e Tailwind CSS.
   */
  {
    name: "theme-toggle",
    type: "registry:component",
    description:
      "A theme-toggle component with next-themes and Tailwind CSS, supporting system, light, and dark modes.",
    title: "theme-toggle",
    author: "<author> <<authorUrl>>",
    dependencies: ["next-themes", "lucide-react"],
    registryDependencies: ["<registryBaseUrl>/utils.json"],
    files: [
      {
        path: "components/layout/toggle/theme-toggle.tsx",
        type: "registry:component",
        target: "src/components/layout/toggle/theme-toggle.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/toggle#toggle-theme",
  },
  /**
   * Componente `toggle-theme`:
   * Similar ao `theme-toggle`, oferece funcionalidade de alternância de tema com um design ligeiramente diferente.
   */
  {
    name: "toggle-theme",
    type: "registry:component",
    description:
      "A toggle-theme component with next-themes and Tailwind CSS, supporting system, light, and dark modes.",
    title: "toggle-theme",
    author: "<author> <<authorUrl>>",
    dependencies: ["next-themes", "lucide-react"],
    registryDependencies: ["<registryBaseUrl>/utils.json", "button"],
    files: [
      {
        path: "components/layout/toggle/toggle-theme.tsx",
        type: "registry:component",
        target: "src/components/layout/toggle/toggle-theme.tsx",
      },
    ],
    docs: "<baseUrl>/docs/components/layout/toggle#toggle-theme",
  },
]
