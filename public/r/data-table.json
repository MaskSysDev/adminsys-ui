{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "data-table",
  "author": "MaskSysDev <https://github.com/MaskSysDev>",
  "description": "A data-table component.",
  "dependencies": ["@tanstack/react-table"],
  "registryDependencies": [
    "badge",
    "button",
    "command",
    "dropdown-menu",
    "input",
    "select",
    "separator",
    "table",
    "http://localhost:3000/r/delete-confirmation-dialog.json",
    "http://localhost:3000/r/details-dialog.json",
    "http://localhost:3000/r/form-dialog.json"
  ],
  "files": [
    {
      "path": "src/registry/components/shared/data-table/index.tsx",
      "content": "import {\n  type Cell,\n  type ColumnDef,\n  type ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  type HeaderGroup,\n  type OnChangeFn,\n  type Row,\n  type SortingState,\n  useReactTable,\n  type VisibilityState,\n} from \"@tanstack/react-table\"\nimport { useState } from \"react\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\nimport { DataTablePagination } from \"@/registry/components/shared/data-table/inc/data-table-pagination\"\nimport { DataTableToolbar } from \"@/registry/components/shared/data-table/inc/data-table-toolbar\"\nimport { LoadingSpinner } from \"@/registry/components/shared/loading/loading-spinner\"\n\ntype DataTableProps<TData, TValue> = {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  page: number\n  perPage: number\n  pageCount: number\n  setPage: (page: number) => void\n  setPerPage: (perPage: number) => void\n  setSort: (sort: SortingState) => void\n  setName: (name: string) => void\n  name: string\n  sort: SortingState\n  isLoading: boolean\n  columnVisibility: VisibilityState\n  setColumnVisibility: OnChangeFn<VisibilityState>\n  filterParams: string\n  setFilterParams: (filterParams: string) => void\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  page,\n  perPage,\n  pageCount,\n  setPage,\n  setPerPage,\n  setSort,\n  setName,\n  name,\n  sort,\n  isLoading,\n  columnVisibility,\n  setColumnVisibility,\n  filterParams,\n  setFilterParams,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = useState({})\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting: sort,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n      pagination: {\n        pageIndex: page - 1,\n        pageSize: perPage,\n      },\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: (updater) => {\n      if (typeof updater === \"function\") {\n        setSort(updater(table.getState().sorting))\n      } else {\n        setSort(updater)\n      }\n    },\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    manualPagination: true,\n    manualSorting: true,\n    pageCount,\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        const newPagination = updater(table.getState().pagination)\n        setPage(newPagination.pageIndex + 1)\n        setPerPage(newPagination.pageSize)\n      } else {\n        const newPagination = updater\n        setPage(newPagination.pageIndex + 1)\n        setPerPage(newPagination.pageSize)\n      }\n    },\n  })\n\n  return (\n    <div className=\"flex h-[38rem] w-full flex-col gap-4\">\n      <DataTableToolbar\n        filterParams={filterParams}\n        name={name}\n        setColumnVisibilityAction={setColumnVisibility}\n        setFilterParamsAction={setFilterParams}\n        setNameAction={setName}\n        table={table}\n      />\n      <div className=\"flex flex-2/3 flex-col overflow-hidden rounded-md border\">\n        <Table>\n          <TableHeader className=\"sticky top-0 z-10 outline-1 outline-border\">\n            {table.getHeaderGroups().map((headerGroup: HeaderGroup<TData>) => (\n              <TableRow\n                className=\"bg-card px-4 hover:bg-card\"\n                key={headerGroup.id}\n              >\n                {headerGroup.headers.map(\n                  (header: HeaderGroup<TData>[\"headers\"][number]) => {\n                    return (\n                      <TableHead\n                        className=\"px-4\"\n                        colSpan={header.colSpan}\n                        key={header.id}\n                      >\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext()\n                            )}\n                      </TableHead>\n                    )\n                  }\n                )}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody className=\"text-muted-foreground\">\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row: Row<TData>) => (\n                <TableRow\n                  className=\"hover:text-foreground\"\n                  data-state={row.getIsSelected() && \"selected\"}\n                  key={row.id}\n                >\n                  {row.getVisibleCells().map((cell: Cell<TData, unknown>) => (\n                    <TableCell\n                      className=\"min-w-fit max-w-48 truncate px-4 py-1.5\"\n                      key={cell.id}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"h-24 text-center hover:bg-card\"\n                  colSpan={columns.length}\n                >\n                  {isLoading ? <LoadingSpinner /> : \"No results.\"}\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination\n        setPage={setPage}\n        setPerPage={setPerPage}\n        table={table}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/index.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/part/data-table-faceted-filter.tsx",
      "content": "import type { Column } from \"@tanstack/react-table\"\nimport { CheckIcon, CirclePlusIcon } from \"lucide-react\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Separator } from \"@/components/ui/separator\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype DataTableFacetedFilterProps<TData, TValue> = {\n  column?: Column<TData, TValue>\n  title?: string\n  options: {\n    label: string\n    value: string\n    icon?: React.ComponentType<{ className?: string }>\n  }[]\n  filterParams: string\n  setFilterParams: (filterParams: string) => void\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options,\n  filterParams,\n  setFilterParams,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues()\n  const selectedValues = new Set(filterParams.split(\",\").filter(Boolean))\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className=\"h-8 cursor-pointer border-dashed\"\n          size=\"sm\"\n          variant=\"outline\"\n        >\n          <CirclePlusIcon className=\"mr-2 h-4 w-4\" />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator className=\"mx-2 h-4\" orientation=\"vertical\" />\n              <Badge\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\n                variant=\"secondary\"\n              >\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden space-x-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge\n                    className=\"rounded-sm px-1 font-normal\"\n                    variant=\"secondary\"\n                  >\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        className=\"rounded-sm px-1 font-normal\"\n                        key={option.value}\n                        variant=\"secondary\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\" className=\"w-[200px]\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value)\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value)\n                      } else {\n                        selectedValues.add(option.value)\n                      }\n                      const newFilterParams =\n                        Array.from(selectedValues).join(\",\")\n                      setFilterParams(newFilterParams)\n                      column?.setFilterValue(\n                        newFilterParams.length\n                          ? newFilterParams.split(\",\")\n                          : undefined\n                      )\n                    }}\n                  >\n                    <div\n                      className={cn(\n                        \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                        isSelected\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"opacity-50 [&_svg]:invisible\"\n                      )}\n                    >\n                      <CheckIcon className=\"h-4 w-4\" />\n                    </div>\n                    {option.icon && (\n                      <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    )}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                )\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    className=\"justify-center text-center\"\n                    onSelect={() => {\n                      setFilterParams(\"\")\n                      column?.setFilterValue(undefined)\n                    }}\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/part/data-table-faceted-filter.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/part/data-table-row-actions.tsx",
      "content": "import { EditIcon, EyeIcon, MoreVerticalIcon, TrashIcon } from \"lucide-react\"\nimport { useState } from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nimport { DeleteConfirmationDialog } from \"@/registry/components/shared/dialog/delete-confirmation-dialog\"\n\ntype DataTableRowActionsProps<TItem, TDetailsDialogProps, TFormDialogProps> = {\n  item: TItem\n  onDelete: (id: string) => Promise<void>\n  isLoadingDelete: boolean\n  DetailsDialogComponent?: React.ComponentType<TDetailsDialogProps>\n  FormDialogComponent?: React.ComponentType<TFormDialogProps>\n  detailsDialogProps?: Omit<TDetailsDialogProps, \"item\" | \"onClose\">\n  formDialogProps?: Omit<TFormDialogProps, \"item\" | \"open\" | \"onClose\">\n  onView?: (item: TItem) => void\n  onEdit?: (item: TItem) => void\n}\n\nexport function DataTableRowActions<\n  TItem extends { id: string },\n  TDetailsDialogProps,\n  TFormDialogProps,\n>({\n  item,\n  onDelete,\n  isLoadingDelete,\n  DetailsDialogComponent,\n  FormDialogComponent,\n  detailsDialogProps,\n  formDialogProps,\n  onView,\n  onEdit,\n}: Readonly<\n  DataTableRowActionsProps<TItem, TDetailsDialogProps, TFormDialogProps>\n>) {\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)\n  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false)\n  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false)\n\n  const handleDelete = async () => {\n    await onDelete(item.id)\n    setIsDeleteDialogOpen(false)\n  }\n\n  const handleViewClick = () => {\n    if (onView) {\n      onView(item)\n    } else if (DetailsDialogComponent) {\n      setIsDetailsDialogOpen(true)\n    }\n  }\n\n  const handleEditClick = () => {\n    if (onEdit) {\n      onEdit(item)\n    } else if (FormDialogComponent) {\n      setIsFormDialogOpen(true)\n    }\n  }\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button className=\"h-8 w-8 cursor-pointer p-0\" variant=\"ghost\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreVerticalIcon className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          {(onView || DetailsDialogComponent) && (\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={handleViewClick}\n            >\n              <EyeIcon className=\"mr-2 size-4\" />\n              View\n            </DropdownMenuItem>\n          )}\n          {(onEdit || FormDialogComponent) && (\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={handleEditClick}\n            >\n              <EditIcon className=\"mr-2 size-4\" />\n              Edit\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            className=\"cursor-pointer text-red-600 focus:text-red-600\"\n            onClick={() => setIsDeleteDialogOpen(true)}\n          >\n            <TrashIcon className=\"mr-2 size-4\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {DetailsDialogComponent && (\n        <DetailsDialogComponent\n          item={isDetailsDialogOpen ? item : null}\n          onClose={() => setIsDetailsDialogOpen(false)}\n          {...(detailsDialogProps as TDetailsDialogProps)}\n        />\n      )}\n\n      {FormDialogComponent && (\n        <FormDialogComponent\n          item={isFormDialogOpen ? item : null}\n          onClose={() => setIsFormDialogOpen(false)}\n          open={isFormDialogOpen}\n          {...(formDialogProps as TFormDialogProps)}\n        />\n      )}\n\n      <DeleteConfirmationDialog\n        isLoading={isLoadingDelete}\n        onConfirm={handleDelete}\n        onOpenChange={setIsDeleteDialogOpen}\n        open={isDeleteDialogOpen}\n      />\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/part/data-table-row-actions.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/part/data-table-search-input.tsx",
      "content": "\"use client\"\n\nimport { X } from \"lucide-react\"\nimport type { ChangeEvent } from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\ntype DataTableSearchInputProps = {\n  name: string\n  setNameAction: (name: string) => void\n  placeholder?: string // Adicionada a prop placeholder\n}\n\nexport function DataTableSearchInput({\n  name,\n  setNameAction,\n  placeholder = \"Search...\", // Usando um valor padrão para placeholder\n}: DataTableSearchInputProps) {\n  return (\n    <div className=\"relative w-fit rounded-md md:w-64\">\n      <Input\n        className=\"h-8 w-full lg:w-[250px]\"\n        onChange={(event: ChangeEvent<HTMLInputElement>) =>\n          setNameAction(event.target.value)\n        }\n        placeholder={placeholder} // Usando a prop placeholder\n        value={name ?? \"\"}\n      />\n      {name && (\n        <Button\n          className=\"-translate-y-1/2 absolute top-1/2 right-2 size-6 cursor-pointer rounded-md text-muted-foreground\"\n          onClick={() => setNameAction(\"\")}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <X className=\"size-4\" />\n        </Button>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/part/data-table-search-input.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/part/data-table-toggle-columns.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\"\nimport { Columns3CogIcon } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ntype DataTableToggleColumnsProps<TData> = {\n  table: Table<TData>\n}\n\nexport function DataTableToggleColumns<TData>({\n  table,\n}: DataTableToggleColumnsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className=\"hidden h-8 cursor-pointer sm:flex\"\n          size=\"sm\"\n          variant=\"outline\"\n        >\n          <Columns3CogIcon className=\"mr-2 h-4 w-4\" />\n          Columns\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                checked={column.getIsVisible()}\n                className=\"cursor-pointer capitalize\"\n                key={column.id}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            )\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/part/data-table-toggle-columns.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/part/data-table-view-options.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\"\nimport { Columns3CogIcon, RefreshCcwIcon } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ntype DataTableViewOptionsProps<TData> = {\n  table: Table<TData>\n}\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className=\"flex h-8 w-8 cursor-pointer md:w-auto\"\n          size=\"sm\"\n          variant=\"outline\"\n        >\n          <Columns3CogIcon className=\"h-4 w-4\" />{\" \"}\n          <span className=\"hidden md:flex\">Columns</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                checked={column.getIsVisible()}\n                className=\"cursor-pointer capitalize\"\n                key={column.id}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            )\n          })}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem\n          onClick={() => {\n            table.resetColumnVisibility()\n          }}\n        >\n          <RefreshCcwIcon /> Reset\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/part/data-table-view-options.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/data-table-column-header.tsx",
      "content": "import type { Column } from \"@tanstack/react-table\"\nimport {\n  ArrowDownNarrowWideIcon,\n  ArrowDownUpIcon,\n  ArrowUpDown,\n  ArrowUpNarrowWideIcon,\n  EyeOffIcon,\n} from \"lucide-react\"\nimport type React from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface DataTableColumnHeaderProps<TData>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"title\"> {\n  column: Column<TData>\n  title: React.ReactNode\n}\n\nexport function DataTableColumnHeader<TData>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(\"ml-0.5\", className)}>{title}</div>\n  }\n\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      {typeof title === \"string\" ? (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              className=\"-ml-2 h-8 cursor-pointer data-[state=open]:bg-accent\"\n              size=\"sm\"\n              variant=\"ghost\"\n            >\n              <span>{title}</span>\n              {column.getIsSorted() === \"desc\" && (\n                <ArrowDownNarrowWideIcon className=\"ml-2 h-4 w-4 text-muted-foreground\" />\n              )}\n              {column.getIsSorted() === \"asc\" && (\n                <ArrowUpNarrowWideIcon className=\"ml-2 h-4 w-4 text-muted-foreground\" />\n              )}\n              {column.getIsSorted() === false && (\n                <ArrowDownUpIcon className=\"ml-2 h-4 w-4 text-muted-foreground\" />\n              )}{\" \"}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\">\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={() => column.toggleSorting(false)}\n            >\n              <ArrowUpNarrowWideIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n              Asc\n            </DropdownMenuItem>\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={() => column.toggleSorting(true)}\n            >\n              <ArrowDownNarrowWideIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n              Desc\n            </DropdownMenuItem>\n            {column.getIsSorted() && (\n              <>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"cursor-pointer\"\n                  onClick={() => column.clearSorting()}\n                >\n                  <ArrowUpDown className=\"mr-2 size-3.5 text-muted-foreground/70\" />\n                  Reset\n                </DropdownMenuItem>\n              </>\n            )}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={() => column.toggleVisibility(false)}\n            >\n              <EyeOffIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />{\" \"}\n              Hide\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      ) : (\n        // If title is not a string (e.g., a ReactNode like FacetedFilter), render it directly\n        title\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/data-table-column-header.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/data-table-pagination.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\"\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronsLeftIcon,\n  ChevronsRightIcon,\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\ntype DataTablePaginationProps<TData> = {\n  table: Table<TData>\n  setPage: (page: number) => void\n  setPerPage: (perPage: number) => void\n}\n\nconst PAGE_SIZE_5 = 5\nconst PAGE_SIZE_10 = 10\nconst PAGE_SIZE_20 = 20\nconst PAGE_SIZE_30 = 30\nconst PAGE_SIZE_40 = 40\nconst PAGE_SIZE_50 = 50\nconst PAGE_SIZES = [\n  PAGE_SIZE_5,\n  PAGE_SIZE_10,\n  PAGE_SIZE_20,\n  PAGE_SIZE_30,\n  PAGE_SIZE_40,\n  PAGE_SIZE_50,\n]\n\nexport function DataTablePagination<TData>({\n  table,\n  setPage,\n  setPerPage,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      {/* Rows Selected */}\n      <div className=\"flex min-w-fit flex-1 text-sm\">\n        <div className=\"flex items-center space-x-2\">\n          <Select\n            onValueChange={(value) => {\n              setPerPage(Number(value))\n            }}\n            value={`${table.getState().pagination.pageSize}`}\n          >\n            <SelectTrigger className=\"h-8 w-[70px] cursor-pointer\" size=\"sm\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {PAGE_SIZES.map((pageSize) => (\n                <SelectItem\n                  className=\"cursor-pointer\"\n                  key={pageSize}\n                  value={`${pageSize}`}\n                >\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <p className=\"hidden font-medium text-muted-foreground text-sm lg:flex\">\n            Rows per page\n          </p>\n        </div>\n      </div>\n      <div className=\"flex w-full items-center justify-end gap-2\">\n        <div className=\"hidden w-[100px] items-center justify-center font-medium text-muted-foreground text-sm lg:flex\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            className=\"hidden h-8 w-8 cursor-pointer p-0 lg:flex\"\n            disabled={!table.getCanPreviousPage()}\n            onClick={() => setPage(1)}\n            variant=\"outline\"\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            className=\"h-8 w-8 cursor-pointer p-0\"\n            disabled={!table.getCanPreviousPage()}\n            onClick={() => setPage(table.getState().pagination.pageIndex)}\n            variant=\"outline\"\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            className=\"h-8 w-8 cursor-pointer p-0\"\n            disabled={!table.getCanNextPage()}\n            onClick={() => setPage(table.getState().pagination.pageIndex + 2)}\n            variant=\"outline\"\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRightIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            className=\"hidden h-8 w-8 cursor-pointer p-0 lg:flex\"\n            disabled={!table.getCanNextPage()}\n            onClick={() => setPage(table.getPageCount())}\n            variant=\"outline\"\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRightIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/data-table-pagination.tsx"
    },
    {
      "path": "src/registry/components/shared/data-table/inc/data-table-toolbar.tsx",
      "content": "\"use client\"\n\nimport type { Table, VisibilityState } from \"@tanstack/react-table\"\n\nimport { DataTableSearchInput } from \"@/registry/components/shared/data-table/inc/part/data-table-search-input\"\nimport { DataTableViewOptions } from \"@/registry/components/shared/data-table/inc/part/data-table-view-options\"\n\ntype DataTableToolbarProps<TData> = {\n  table: Table<TData>\n  name: string\n  setNameAction: (name: string) => void\n  setColumnVisibilityAction: (visibility: VisibilityState) => void\n  filterParams: string\n  setFilterParamsAction: (filterParams: string) => void\n}\n\nexport function DataTableToolbar<TData>({\n  table,\n  name,\n  setNameAction,\n}: DataTableToolbarProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center space-x-2\">\n        <DataTableSearchInput\n          name={name}\n          placeholder=\"Filtrar por nome...\"\n          setNameAction={setNameAction}\n        />\n      </div>\n      <DataTableViewOptions table={table} />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/shared/data-table/inc/data-table-toolbar.tsx"
    }
  ],
  "docs": "http://localhost:3000/docs/components/shared/data-table"
}
