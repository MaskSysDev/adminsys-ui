{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-auth",
  "type": "registry:component",
  "title": "form-auth",
  "author": "MaskSysDev <https://github.com/MaskSysDev>",
  "description": "A form-auth component.",
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "form",
    "scroll-area",
    "tabs",
    "sonner",
    "http://localhost:3000/r/alert-error.json",
    "http://localhost:3000/r/alert-success.json",
    "http://localhost:3000/r/icons.json",
    "http://localhost:3000/r/loading-spinner.json",
    "http://localhost:3000/r/password-input.json",
    "http://localhost:3000/r/sanitize.json"
  ],
  "files": [
    {
      "path": "src/registry/components/auth/card/card-auth-wrapper.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { TermsAndPolicyDialog } from \"@/registry/components/auth/dialog/terms-and-policy-dialog\"\nimport { SocialLogin } from \"@/registry/components/auth/form/social-login\"\n\n/**\n * Propriedades do componente CardAuthWrapper\n *\n * Define a estrutura e comportamento do card de autenticação,\n * incluindo cabeçalho, descrição e opções de exibição.\n */\nexport type CardWrapperProps = {\n  children: React.ReactNode\n  headerLabel?: string\n  headerDescription?: string\n  showSocial?: boolean\n  className?: string\n  termsAndPolicy?: boolean\n}\n\n/**\n * Componente wrapper para cards de autenticação\n *\n * Fornece uma estrutura consistente para formulários de autenticação,\n * incluindo cabeçalho, conteúdo, login social e termos de uso.\n */\nexport const CardAuthWrapper = ({\n  children,\n  headerLabel,\n  headerDescription,\n  showSocial,\n  className,\n  termsAndPolicy,\n}: CardWrapperProps) => {\n  /**\n   * Estado para controlar a exibição dos diálogos\n   *\n   * Gerencia a visibilidade dos diálogos de termos\n   * e política de privacidade.\n   */\n  const [dialogState, setDialogState] = useState({\n    terms: false,\n    policy: false,\n  })\n\n  /**\n   * Manipula a abertura do diálogo de termos\n   *\n   * Atualiza o estado para exibir o diálogo\n   * de termos de serviço.\n   */\n  const handleOpenTerms = () => {\n    setDialogState((prev) => ({ ...prev, terms: true }))\n  }\n\n  /**\n   * Manipula a abertura do diálogo de política\n   *\n   * Atualiza o estado para exibir o diálogo\n   * de política de privacidade.\n   */\n  const handleOpenPolicy = () => {\n    setDialogState((prev) => ({ ...prev, policy: true }))\n  }\n\n  /**\n   * Manipula o fechamento dos diálogos\n   *\n   * Reseta o estado para fechar todos os diálogos.\n   */\n  const handleCloseDialogs = () => {\n    setDialogState({ terms: false, policy: false })\n  }\n\n  return (\n    <>\n      <Card\n        className={cn(\"mx-auto w-full max-w-lg overflow-hidden\", className)}\n      >\n        {/* Cabeçalho do card. Exibe o título e descrição quando fornecidos, com estilo\n        centralizado e tipografia adequada */}\n        <CardHeader>\n          {headerLabel && (\n            <CardTitle className=\"text-center font-bold text-2xl\">\n              {headerLabel}\n            </CardTitle>\n          )}\n          {headerDescription && (\n            <CardDescription className=\"text-center\">\n              {headerDescription}\n            </CardDescription>\n          )}\n        </CardHeader>\n        {/* Conteúdo principal do card * * Renderiza o conteúdo filho (formulários, etc) * dentro da\n        estrutura do card */}\n        <CardContent>{children}</CardContent>\n        {/* Seção de login social * * Exibe opções de login social quando showSocial é true, * com\n        separador visual e layout adequado */}\n        {showSocial && (\n          <div>\n            {/* Separador visual * * Cria uma linha divisória com texto central * para separar login\n            social do formulário principal */}\n            <div className=\"flex items-center px-6 pb-6 before:mt-0.5 before:flex-1 before:border-muted before:border-t after:mt-0.5 after:flex-1 after:border-muted after:border-t\">\n              <p className=\"mx-4 mb-0 text-center text-muted-foreground text-sm\">\n                ou continue com\n              </p>\n            </div>\n\n            {/* Rodapé com login social * * Renderiza os botões de login social * sem borda superior\n            para melhor integração visual */}\n            <CardFooter className=\"border-t-0 bg-card\">\n              <SocialLogin />\n            </CardFooter>\n          </div>\n        )}\n\n        {/* Rodapé com termos de uso * * Exibe os links para termos de serviço e política * de privacidade\n        quando termsAndPolicy é true */}\n        <CardFooter className=\"flex flex-col flex-wrap items-center gap-4 border-t-0 bg-card\">\n          <div className=\"block w-full space-y-8\">\n            {termsAndPolicy && (\n              /**\n               * Texto dos termos\n               *\n               * Apresenta o texto legal com links para\n               * termos de serviço e política de privacidade.\n               */\n              <p className=\"text-center text-muted-foreground text-sm\">\n                Ao fazer login, você concorda com nossos{\" \"}\n                <Button\n                  className=\"cursor-pointer p-0\"\n                  onClick={handleOpenTerms}\n                  size=\"sm\"\n                  variant=\"link\"\n                >\n                  Termos de Serviço\n                </Button>{\" \"}\n                e{\" \"}\n                <Button\n                  className=\"cursor-pointer p-0\"\n                  onClick={handleOpenPolicy}\n                  size=\"sm\"\n                  variant=\"link\"\n                >\n                  Política de Privacidade\n                </Button>\n                .\n              </p>\n            )}\n          </div>\n        </CardFooter>\n      </Card>\n\n      {/* Diálogo de Termos de Serviço. Exibe o conteúdo dos termos em uma janela modal */}\n      <TermsAndPolicyDialog\n        content=\"Conteúdo dos Termos de Serviço...\"\n        description=\"Por favor, leia atentamente nossos termos de serviço antes de prosseguir.\"\n        isOpen={dialogState.terms}\n        onCloseAction={handleCloseDialogs}\n        title=\"Termos de Serviço\"\n      />\n\n      {/* Diálogo de Política de Privacidade. Exibe o conteúdo da política em uma janela modal */}\n      <TermsAndPolicyDialog\n        content=\"Conteúdo da Política de Privacidade...\"\n        description=\"Entenda como tratamos suas informações pessoais.\"\n        isOpen={dialogState.policy}\n        onCloseAction={handleCloseDialogs}\n        title=\"Política de Privacidade\"\n      />\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/card/card-auth-wrapper.tsx"
    },
    {
      "path": "src/registry/components/auth/dialog/terms-and-policy-dialog.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\n/**\n * Propriedades do componente TermsDialog\n *\n * Define a configuração do diálogo, incluindo título,\n * descrição e conteúdo a ser exibido.\n */\nexport type TermsDialogProps = {\n  title: string\n  description: string\n  content: string\n  isOpen: boolean\n  onCloseAction: () => void\n}\n\n/**\n * Componente de diálogo para exibição de termos e políticas\n *\n * Fornece uma interface modal para visualização de documentos\n * legais com rolagem e layout adequado.\n */\nexport function TermsAndPolicyDialog({\n  title,\n  description,\n  content,\n  isOpen,\n  onCloseAction,\n}: TermsDialogProps) {\n  return (\n    <Dialog onOpenChange={onCloseAction} open={isOpen}>\n      <DialogContent className=\"max-h-[80vh] max-w-3xl\">\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>{description}</DialogDescription>\n        </DialogHeader>\n\n        {/* Área de rolagem para o conteúdo. Permite visualização confortável de textos longos */}\n        <ScrollArea className=\"max-h-[60vh] pr-4\">\n          <div className=\"prose prose-sm dark:prose-invert\">{content}</div>\n        </ScrollArea>\n\n        {/* Rodapé do diálogo com botão de fechar */}\n        <DialogFooter>\n          {/*\n           * Botão de fechar usando DialogClose\n           * - type='button': Evita submissão acidental de formulários\n           * - variant='secondary': Estilo visual mais suave que o primário\n           * - className='cursor-pointer': Indica interatividade\n           */}\n          <DialogClose asChild>\n            <Button\n              className=\"cursor-pointer\"\n              type=\"button\"\n              variant=\"secondary\"\n            >\n              Fechar\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/dialog/terms-and-policy-dialog.tsx"
    },
    {
      "path": "src/registry/components/auth/form/social-login.tsx",
      "content": "\"use client\"\n\nimport { toast } from \"sonner\"\n\nimport { Icons } from \"@/components/layout/icons\"\nimport { Button } from \"@/components/ui/button\"\n\n/**\n * Componente de login social\n *\n * Implementa o fluxo de autenticação via provedores\n * sociais (Google e GitHub) com:\n * - Feedback visual\n * - Tratamento de erros\n * - Logs para auditoria\n */\nexport const SocialLogin = () => {\n  /**\n   * Processa o login social\n   *\n   * Gerencia o fluxo de autenticação:\n   * - Validação do provedor\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  const handleSocialLogin = (provider: \"google\" | \"github\") => {\n    try {\n      // TODO: Integração com provedores\n\n      toast.success(\"Login Realizado\", {\n        description: `Autenticado via ${provider}`,\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao realizar login social\"\n\n      // Exibe feedback visual do erro\n      toast.error(\"Erro no Login\", {\n        description: errorMsg,\n        classNames: {\n          error: \"!bg-red-200 !text-red-600 dark:!bg-red-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n    }\n  }\n\n  return (\n    <div className=\"grid w-full grid-cols-2 items-center gap-x-2\">\n      <Button\n        className=\"w-full cursor-pointer bg-background\"\n        onClick={() => {\n          handleSocialLogin(\"google\")\n        }}\n        size=\"lg\"\n        variant=\"outline\"\n      >\n        <Icons.google className=\"size-5\" />\n      </Button>\n      <Button\n        className=\"w-full cursor-pointer bg-background\"\n        onClick={() => {\n          handleSocialLogin(\"github\")\n        }}\n        size=\"lg\"\n        variant=\"outline\"\n      >\n        <Icons.gitHub className=\"size-5\" />\n      </Button>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/social-login.tsx"
    },
    {
      "path": "src/registry/components/auth/form/sign-in-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button, buttonVariants } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nimport { cn } from \"@/lib/utils\"\nimport { sanitizeData } from \"@/utils/sanitize\"\n\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\nimport { PasswordInput } from \"@/registry/components/shared/form/password-input\"\nimport { LoadingSpinner } from \"@/registry/components/shared/loading/loading-spinner\"\nimport {\n  type SignInFormValues,\n  signInSchema,\n} from \"@/validations/auth/sign-in.schema\"\n\n/**\n * Estado do formulário de login\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n * - Estado do 2FA\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n  showTwoFactor: boolean\n}\n\n/**\n * Formulário de autenticação\n *\n * Implementa o fluxo completo de login com:\n * - Validação de campos\n * - Suporte a 2FA\n * - Feedback visual\n * - Tratamento de erros\n * - Redirecionamento após sucesso\n */\nexport function SignInForm() {\n  const router = useRouter()\n\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading, mensagens de feedback\n   * e exibição do campo de 2FA quando necessário.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n    showTwoFactor: false,\n  })\n\n  /**\n   * Configuração do formulário\n   *\n   * Define valores iniciais e regras de validação\n   * usando o schema Zod para type-safety.\n   */\n  const form = useForm<SignInFormValues>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      code: \"\",\n    },\n  })\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o envio do formulário\n   *\n   * Gerencia o fluxo completo de autenticação:\n   * - Validação dos dados\n   * - Sanitização\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   * - Redirecionamento após sucesso\n   */\n  async function onSubmit(data: SignInFormValues) {\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      // Sanitiza dados para prevenir injeção\n      const _sanitizedData = sanitizeData(data, signInSchema)\n\n      // TODO: Envia dados para autenticação\n      // Simula delay de rede para melhor UX\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa login bem-sucedido\n      const successMsg = `Login realizado com sucesso para ${data.email}.`\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Login Realizado\", {\n        description: \"Bem-vindo(a) de volta!\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Limpa o formulário após sucesso\n      form.reset()\n\n      // Redireciona para o dashboard\n      router.push(\"/admin/dashboard\")\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao realizar login\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Form {...form}>\n        <form\n          className=\"space-y-4\"\n          onSubmit={(e) => {\n            form.handleSubmit(onSubmit)(e)\n          }}\n        >\n          {formState.showTwoFactor ? (\n            /* Campo de código 2FA - validação e processamento */\n            <FormField\n              control={form.control}\n              name=\"code\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Código de Autenticação</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={formState.isLoading}\n                      placeholder=\"Digite o código de 6 dígitos\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          ) : (\n            <>\n              {/* Campo de email - validação e sanitização */}\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        disabled={formState.isLoading}\n                        placeholder=\"seu@email.com\"\n                        type=\"email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Campo de senha - entrada segura com validação */}\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <div className=\"flex items-center\">\n                      <FormLabel>Senha</FormLabel>\n                      <Link\n                        className={cn(\n                          buttonVariants({\n                            variant: \"link\",\n                            size: \"sm\",\n                            className: \"ml-auto h-auto p-0 font-normal\",\n                          })\n                        )}\n                        href=\"/auth/forgot-password\"\n                      >\n                        Esqueceu a senha?\n                      </Link>\n                    </div>\n                    <FormControl>\n                      <PasswordInput\n                        disabled={formState.isLoading}\n                        placeholder=\"••••••••\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </>\n          )}\n\n          {/* Feedback visual - mensagens de erro/sucesso */}\n          {formState.errorMessage && (\n            <AlertError title={formState.errorMessage} />\n          )}\n          {formState.successMessage && (\n            <AlertSuccess title={formState.successMessage} />\n          )}\n\n          {/* Botão de ação - controle do fluxo de autenticação */}\n          <Button\n            className=\"w-full cursor-pointer\"\n            disabled={formState.isLoading}\n            type=\"submit\"\n          >\n            {(() => {\n              if (formState.isLoading) {\n                return <LoadingSpinner className=\"size-4\" />\n              }\n              if (formState.showTwoFactor) {\n                return \"Confirmar\"\n              }\n              return \"Entrar\"\n            })()}\n          </Button>\n        </form>\n      </Form>\n\n      {/* Navegação - links para fluxos alternativos */}\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"text-center text-muted-foreground text-sm\">\n          Não tem uma conta?{\" \"}\n          <Link className=\"text-primary hover:underline\" href=\"/auth/sign-up\">\n            Crie uma conta.\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/sign-in-form.tsx"
    },
    {
      "path": "src/registry/validations/auth/auth-base.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { sanitizeEmail, sanitizeName, sanitizePassword } from \"@/utils/sanitize\"\n\n/**\n * Constantes de validação\n *\n * Centraliza as regras de validação para garantir consistência nas mensagens\n * e facilitar manutenção. Evita duplicação de código e permite alterações\n * centralizadas.\n */\nexport const VALIDATION = {\n  name: {\n    min: 3,\n    max: 100,\n    required: \"Nome é obrigatório\",\n  },\n  lastName: {\n    min: 3,\n    max: 100,\n    required: \"Sobrenome é obrigatório\",\n  },\n  email: {\n    max: 100,\n    required: \"Email é obrigatório\",\n    invalid: \"Email inválido\",\n  },\n  password: {\n    min: 8,\n    max: 100,\n    required: \"Senha é obrigatória\",\n    // Regex para garantir senha forte: maiúscula, minúscula, número e caractere especial\n    regex:\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    invalid:\n      \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula, um número e um caractere especial\",\n  },\n  confirmPassword: {\n    required: \"Confirmação de senha é obrigatória\",\n    mismatch: \"As senhas não conferem\",\n  },\n  code: {\n    required: \"Código é obrigatório\",\n    invalid: \"Código inválido\",\n  },\n  token: {\n    required: \"Token é obrigatório\",\n    invalid: \"Token inválido\",\n  },\n}\n\n/**\n * Schemas base reutilizáveis\n *\n * Define schemas base que podem ser reutilizados em diferentes contextos\n * de validação. Cada schema inclui transformações para sanitização dos\n * dados antes da validação.\n */\nexport const authBaseSchema = {\n  name: z\n    .string()\n    .min(1, VALIDATION.name.required)\n    .min(\n      VALIDATION.name.min,\n      `Nome deve ter no mínimo ${VALIDATION.name.min} caracteres`\n    )\n    .max(\n      VALIDATION.name.max,\n      `Nome deve ter no máximo ${VALIDATION.name.max} caracteres`\n    )\n    .transform(sanitizeName),\n  lastName: z\n    .string()\n    .min(1, VALIDATION.lastName.required)\n    .min(\n      VALIDATION.lastName.min,\n      `Sobrenome deve ter no mínimo ${VALIDATION.lastName.min} caracteres`\n    )\n    .max(\n      VALIDATION.lastName.max,\n      `Sobrenome deve ter no máximo ${VALIDATION.lastName.max} caracteres`\n    )\n    .transform(sanitizeName),\n  email: z\n    .string()\n    .min(1, VALIDATION.email.required)\n    .max(\n      VALIDATION.email.max,\n      `Email deve ter no máximo ${VALIDATION.email.max} caracteres`\n    )\n    .email(VALIDATION.email.invalid)\n    .transform(sanitizeEmail),\n  password: z\n    .string()\n    .min(1, VALIDATION.password.required)\n    .regex(VALIDATION.password.regex, VALIDATION.password.invalid)\n    .min(\n      VALIDATION.password.min,\n      `Senha deve ter no mínimo ${VALIDATION.password.min} caracteres`\n    )\n    .max(\n      VALIDATION.password.max,\n      `Senha deve ter no máximo ${VALIDATION.password.max} caracteres`\n    )\n    .transform(sanitizePassword),\n}\n",
      "type": "registry:component",
      "target": "src/validations/auth/auth-base.schema.ts"
    },
    {
      "path": "src/registry/validations/auth/sign-in.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { authBaseSchema, VALIDATION } from \"@/validations/auth/auth-base.schema\"\n\n/**\n * Schema de autenticação\n *\n * Define a estrutura e regras de validação para o processo de login.\n * Suporta autenticação em duas etapas (2FA) através do campo code opcional.\n */\nexport const signInSchema = z.object({\n  email: authBaseSchema.email,\n  password: z.string().min(1, VALIDATION.password.required),\n  code: z.string().optional(),\n})\n\n/**\n * Tipos derivados dos schemas\n *\n * Define tipos TypeScript derivados dos schemas Zod para garantir\n * type-safety em toda a aplicação. Facilita o uso em formulários\n * e respostas de API.\n */\nexport type SignInFormValues = z.infer<typeof signInSchema>\n",
      "type": "registry:component",
      "target": "src/validations/auth/sign-in.schema.ts"
    },
    {
      "path": "src/registry/components/auth/form/sign-up-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport Link from \"next/link\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nimport { sanitizeData } from \"@/utils/sanitize\"\n\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\nimport { PasswordInput } from \"@/registry/components/shared/form/password-input\"\nimport { LoadingSpinner } from \"@/registry/components/shared/loading/loading-spinner\"\nimport {\n  type SignUpFormValues,\n  signUpSchema,\n} from \"@/validations/auth/sign-up.schema\"\n\n/**\n * Estado do formulário de registro\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n}\n\n/**\n * Formulário de registro\n *\n * Implementa o fluxo completo de cadastro com:\n * - Validação de campos\n * - Feedback visual\n * - Tratamento de erros\n * - Redirecionamento após sucesso\n */\nexport function SignUpForm() {\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e mensagens\n   * de feedback durante o processo.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n  })\n\n  /**\n   * Configuração do formulário\n   *\n   * Define valores iniciais e regras de validação\n   * usando o schema Zod para type-safety.\n   */\n  const form = useForm<SignUpFormValues>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      name: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  })\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o envio do formulário\n   *\n   * Gerencia o fluxo completo de cadastro:\n   * - Validação dos dados\n   * - Sanitização\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  async function onSubmit(data: SignUpFormValues) {\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      // Sanitiza dados para prevenir injeção\n      const sanitizedData = sanitizeData(data, signUpSchema)\n\n      // TODO: Envia dados para cadastro\n      // Simula delay de rede para melhor UX\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa cadastro bem-sucedido\n      const successMsg = `Conta criada com sucesso para ${sanitizedData.name} (${sanitizedData.email}). Please check your email for verification.`\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Cadastro Realizado\", {\n        description: `Bem-vindo(a), ${sanitizedData.name}! ${successMsg}`,\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Limpa o formulário após sucesso\n      form.reset()\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao realizar cadastro\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Form {...form}>\n        <form\n          className=\"space-y-4\"\n          onSubmit={(e) => {\n            form.handleSubmit(onSubmit)(e)\n          }}\n        >\n          {/** Campo de nome - validação e sanitização */}\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nome</FormLabel>\n                <FormControl>\n                  <Input\n                    disabled={formState.isLoading}\n                    placeholder=\"Seu nome\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/** Campo de sobrenome - validação e sanitização */}\n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Sobrenome</FormLabel>\n                <FormControl>\n                  <Input\n                    disabled={formState.isLoading}\n                    placeholder=\"Seu sobrenome\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/** Campo de email - validação e sanitização */}\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    disabled={formState.isLoading}\n                    placeholder=\"seu@email.com\"\n                    type=\"email\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/** Campo de senha - entrada segura com validação */}\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Senha</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    disabled={formState.isLoading}\n                    placeholder=\"••••••••\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/** Feedback visual - mensagens de erro/sucesso */}\n          {formState.errorMessage && (\n            <AlertError title={formState.errorMessage} />\n          )}\n          {formState.successMessage && (\n            <AlertSuccess title={formState.successMessage} />\n          )}\n\n          {/** Botão de ação - controle do fluxo de cadastro */}\n          <Button\n            className=\"w-full cursor-pointer\"\n            disabled={formState.isLoading}\n            type=\"submit\"\n          >\n            {formState.isLoading ? (\n              <LoadingSpinner className=\"size-4\" />\n            ) : (\n              \"Criar Conta\"\n            )}\n          </Button>\n        </form>\n      </Form>\n\n      {/** Navegação - links para fluxos alternativos */}\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"text-center text-muted-foreground text-sm\">\n          Já tem uma conta?{\" \"}\n          <Link className=\"text-primary hover:underline\" href=\"/auth/sign-in\">\n            Faça login.\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/sign-up-form.tsx"
    },
    {
      "path": "src/registry/validations/auth/sign-up.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { authBaseSchema } from \"@/validations/auth/auth-base.schema\"\n\n/**\n * Schema de registro de usuário\n *\n * Define a estrutura e regras de validação para o registro de novos\n * usuários. Garante que todos os campos obrigatórios estejam presentes\n * e válidos antes de prosseguir com o cadastro.\n */\nexport const signUpSchema = z.object({\n  name: authBaseSchema.name,\n  lastName: authBaseSchema.lastName,\n  email: authBaseSchema.email,\n  password: authBaseSchema.password,\n})\n\n/**\n * Tipos derivados dos schemas\n *\n * Define tipos TypeScript derivados dos schemas Zod para garantir\n * type-safety em toda a aplicação. Facilita o uso em formulários\n * e respostas de API.\n */\nexport type SignUpFormValues = z.infer<typeof signUpSchema>\n",
      "type": "registry:component",
      "target": "src/validations/auth/sign-up.schema.ts"
    },
    {
      "path": "src/registry/components/auth/form/form-auth.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\nimport { CardAuthWrapper } from \"@/registry/components/auth/card/card-auth-wrapper\"\nimport { SignInForm } from \"@/registry/components/auth/form/sign-in-form\"\nimport { SignUpForm } from \"@/registry/components/auth/form/sign-up-form\"\n\n/**\n * Define os tipos de abas disponíveis no formulário\n *\n * Controla a navegação entre as diferentes seções\n * do formulário de autenticação.\n */\ntype TabType = \"sign-in\" | \"sign-up\"\n\n/**\n * Propriedades do componente FormAuth\n *\n * Define a configuração inicial do componente,\n * permitindo controlar qual aba deve estar ativa.\n */\nexport type FormAuthProps = {\n  activeTab?: TabType\n}\n\n/**\n * Configuração dos formulários\n *\n * Define o título e descrição específicos para cada\n * tipo de formulário (login e cadastro).\n */\ntype FormConfig = {\n  title: string\n  description: string\n}\n\n/**\n * Configurações dos formulários\n *\n * Mapeia cada tipo de formulário com suas respectivas\n * configurações de título e descrição.\n */\nconst formConfig: Record<TabType, FormConfig> = {\n  \"sign-in\": {\n    title: \"Login\",\n    description: \"Entre com suas credenciais para acessar sua conta\",\n  },\n  \"sign-up\": {\n    title: \"Criar Conta\",\n    description: \"Preencha os dados abaixo para criar sua conta\",\n  },\n} as const\n\n/**\n * Mapeamento dos formulários\n *\n * Associa cada tipo de aba ao seu respectivo\n * componente de formulário.\n */\nconst formComponents: Record<TabType, React.ComponentType> = {\n  \"sign-in\": SignInForm,\n  \"sign-up\": SignUpForm,\n} as const\n\n/**\n * Componente principal de autenticação\n *\n * Gerencia o sistema de abas e a navegação entre os\n * formulários de login e cadastro.\n */\nexport function FormAuth({ activeTab = \"sign-in\" }: FormAuthProps) {\n  /**\n   * Estado que controla a aba ativa no formulário\n   *\n   * Inicializa com o valor da prop activeTab ou 'sign-in'\n   * como padrão, permitindo alternar entre as abas.\n   */\n  const [currentTab, setCurrentTab] = useState<TabType>(activeTab)\n\n  /**\n   * Obtém a configuração atual do formulário\n   *\n   * Retorna as configurações específicas da aba\n   * que está atualmente ativa.\n   */\n  const currentFormConfig = formConfig[currentTab]\n\n  /**\n   * Manipula a mudança de aba\n   *\n   * Atualiza o estado da aba ativa quando o usuário\n   * seleciona uma nova aba.\n   */\n  const handleTabChange = (value: string) => {\n    setCurrentTab(value as TabType)\n  }\n\n  return (\n    /**\n     * Wrapper do card de autenticação\n     *\n     * Fornece a estrutura visual e o contexto para os formulários,\n     * incluindo cabeçalho e descrição da seção de autenticação.\n     */\n    <CardAuthWrapper\n      headerDescription={currentFormConfig.description}\n      headerLabel={currentFormConfig.title}\n      showSocial={true}\n      termsAndPolicy\n    >\n      {/* Sistema de abas para alternar entre formulários * * Gerencia a navegação entre os\n      formulários de login e cadastro, * mantendo o estado da aba ativa e atualizando a interface. */}\n      <Tabs onValueChange={handleTabChange} value={currentTab}>\n        <TabList />\n        <TabContent activeTab={currentTab} />\n      </Tabs>\n    </CardAuthWrapper>\n  )\n}\n\n/**\n * Componente de lista de abas\n *\n * Renderiza os botões de navegação entre as abas\n * de login e cadastro.\n */\nfunction TabList() {\n  return (\n    <TabsList className=\"mb-4 grid w-full grid-cols-2\">\n      <TabsTrigger className=\"cursor-pointer\" value=\"sign-in\">\n        Entrar\n      </TabsTrigger>\n      <TabsTrigger className=\"cursor-pointer\" value=\"sign-up\">\n        Cadastrar\n      </TabsTrigger>\n    </TabsList>\n  )\n}\n\n/**\n * Componente de conteúdo das abas\n *\n * Gerencia a renderização do conteúdo específico\n * de cada aba (login ou cadastro).\n */\nfunction TabContent({ activeTab }: { activeTab: TabType }) {\n  /**\n   * Obtém o componente de formulário apropriado\n   *\n   * Utiliza o mapeamento de formulários para renderizar\n   * o componente correto baseado na aba ativa.\n   */\n  const FormComponent = formComponents[activeTab]\n\n  return (\n    <TabsContent value={activeTab}>\n      <FormComponent />\n    </TabsContent>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/form-auth.tsx"
    }
  ],
  "docs": "http://localhost:3000/docs/components/auth/form#form-auth"
}
