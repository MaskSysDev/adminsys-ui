{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "adminsys-auth",
  "type": "registry:block",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "alert-dialog",
    "switch",
    "http://localhost:3000/r/adminsys.json",
    "http://localhost:3000/r/form-auth.json",
    "http://localhost:3000/r/auth-layout.json"
  ],
  "files": [
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/layout.tsx",
      "content": "import { footer01, navbar01 } from \"@/config/site-config\"\nimport { AuthLayout } from \"@/registry/components/layout/auth-layout\"\n\nexport default function HomeLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <AuthLayout footer={footer01} navbar={navbar01}>\n      {children}\n    </AuthLayout>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/layout.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/error/page.tsx",
      "content": "import { TriangleAlertIcon } from \"lucide-react\"\nimport type { Metadata } from \"next\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\n\nimport { CardAuthWrapper } from \"@/registry/components/auth/card/card-auth-wrapper\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"AuthError\",\n  description: \"Description AuthError.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <CardAuthWrapper headerLabel=\"Oops! Something went wrong!\">\n        <div className=\"flex w-full flex-col items-center justify-center gap-4\">\n          <TriangleAlertIcon className=\"size-16 text-red-600\" />\n\n          <Button asChild variant=\"link\">\n            <Link href=\"/\">Back to Home</Link>\n          </Button>\n        </div>\n      </CardAuthWrapper>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/error/page.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/forgot-password/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { CardAuthWrapper } from \"@/registry/components/auth/card/card-auth-wrapper\"\nimport { ForgotPasswordForm } from \"@/registry/components/auth/form/forgot-password-form\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"ForgotPassword\",\n  description: \"Description ForgotPassword.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <CardAuthWrapper headerLabel=\"Forgot your password?\">\n        <ForgotPasswordForm />\n      </CardAuthWrapper>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/forgot-password/page.tsx"
    },
    {
      "path": "src/registry/components/auth/form/forgot-password-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nimport { sanitizeData } from \"@/utils/sanitize\"\n\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\nimport {\n  type ForgotPasswordFormValues,\n  forgotPasswordSchema,\n} from \"@/validations/auth/forgot-password.schema\"\n\n/**\n * Estado do formulário de recuperação de senha\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n}\n\n/**\n * Formulário de recuperação de senha\n *\n * Implementa o fluxo completo de recuperação com:\n * - Validação de campos\n * - Feedback visual\n * - Tratamento de erros\n * - Logs para auditoria\n */\nexport function ForgotPasswordForm() {\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e mensagens\n   * de feedback durante o processo.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n  })\n\n  /**\n   * Configuração do formulário\n   *\n   * Define valores iniciais e regras de validação\n   * usando o schema Zod para type-safety.\n   */\n  const form = useForm<ForgotPasswordFormValues>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  })\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o envio do formulário\n   *\n   * Gerencia o fluxo completo de recuperação:\n   * - Validação dos dados\n   * - Sanitização\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  async function onSubmit(data: ForgotPasswordFormValues) {\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      // Sanitiza dados para prevenir injeção\n      const sanitizedData = sanitizeData(data, forgotPasswordSchema)\n\n      // TODO: Envia dados para recuperação\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa recuperação bem-sucedida\n      const successMsg = `Email de recuperação enviado para ${sanitizedData.email}.`\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Email Enviado\", {\n        description: \"Verifique sua caixa de entrada para redefinir sua senha\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Limpa o formulário após sucesso\n      form.reset()\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error\n          ? error.message\n          : \"Erro ao processar recuperação de senha\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form\n        className=\"space-y-6\"\n        onSubmit={(e) => {\n          form.handleSubmit(onSubmit)(e)\n        }}\n      >\n        {/* Campo de email - validação e sanitização */}\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  disabled={formState.isLoading}\n                  placeholder=\"seu@email.com\"\n                  type=\"email\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Feedback visual - mensagens de erro/sucesso */}\n        {formState.errorMessage && (\n          <AlertError title={formState.errorMessage} />\n        )}\n        {formState.successMessage && (\n          <AlertSuccess title={formState.successMessage} />\n        )}\n\n        {/* Botão de ação - controle do fluxo de recuperação */}\n        <Button\n          className=\"w-full cursor-pointer\"\n          disabled={formState.isLoading}\n          type=\"submit\"\n        >\n          {formState.isLoading ? (\n            <LoadingSpinner className=\"size-4\" />\n          ) : (\n            \"Enviar email de recuperação\"\n          )}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/forgot-password-form.tsx"
    },
    {
      "path": "src/registry/validations/auth/forgot-password.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { authBaseSchema } from \"@/validations/auth/auth-base.schema\"\n\n/**\n * Schema de recuperação de senha\n *\n * Define a estrutura e regras de validação para o processo de\n * recuperação de senha. Requer apenas o email para iniciar o processo.\n */\nexport const forgotPasswordSchema = z.object({\n  email: authBaseSchema.email,\n})\n\n/**\n * Tipos derivados dos schemas\n *\n * Define tipos TypeScript derivados dos schemas Zod para garantir\n * type-safety em toda a aplicação. Facilita o uso em formulários\n * e respostas de API.\n */\nexport type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>\n",
      "type": "registry:component",
      "target": "src/validations/auth/forgot-password.schema.ts"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/new-verification/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { CardAuthWrapper } from \"@/registry/components/auth/card/card-auth-wrapper\"\nimport { NewVerificationForm } from \"@/registry/components/auth/form/new-verification-form\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"NewVerification\",\n  description: \"Description NewVerification.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <CardAuthWrapper headerLabel=\"Confirming your verification\">\n        <NewVerificationForm />\n      </CardAuthWrapper>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/new-verification/page.tsx"
    },
    {
      "path": "src/registry/components/auth/form/new-verification-form.tsx",
      "content": "\"use client\"\n\n// import { useSearchParams } from \"next/navigation\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { toast } from \"sonner\"\n\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\n\n/**\n * Estado do formulário de verificação\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n}\n\n/**\n * Formulário de verificação de email\n *\n * Implementa o fluxo completo de verificação com:\n * - Validação do token\n * - Feedback visual\n * - Tratamento de erros\n * - Redirecionamento após sucesso\n */\nexport const NewVerificationForm = () => {\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e mensagens\n   * de feedback durante o processo.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n  })\n\n  /**\n   * Obtém parâmetros da URL\n   *\n   * Extrai o token de verificação da query string\n   * para processamento.\n   */\n  // const searchParams = useSearchParams()\n  // const token = searchParams.get(\"token\")\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa a verificação do token\n   *\n   * Gerencia o fluxo completo de verificação:\n   * - Validação do token\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: This hook does not specify its dependency on updateFormState.\n  const onNewVerificationSubmit = useCallback(async () => {\n    // Evita processamento duplicado\n    if (formState.successMessage || formState.errorMessage) {\n      return\n    }\n\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      // Valida presença do token\n      // if (!token) {\n      //   const errorMsg = \"Token de verificação não encontrado\"\n      //   updateFormState({ errorMessage: errorMsg })\n\n      //   return\n      // }\n\n      // TODO: Envia token para verificação\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa verificação bem-sucedida\n      const successMsg = \"Email verificado com sucesso!\"\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Email Verificado\", {\n        description: \"Seu email foi verificado com sucesso!\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao verificar email\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }, [\n    // token,\n    formState.successMessage,\n    formState.errorMessage, // Finaliza o processo independente do resultado\n  ])\n\n  /**\n   * Inicia o processo de verificação\n   *\n   * Executa a verificação automaticamente quando\n   * o componente é montado.\n   */\n  useEffect(() => {\n    onNewVerificationSubmit()\n  }, [onNewVerificationSubmit])\n\n  return (\n    <div className=\"flex w-full items-center justify-center\">\n      {/* Indicador de loading durante o processo */}\n      {formState.isLoading && <LoadingSpinner className=\"size-5\" />}\n\n      {/* Feedback visual - mensagens de erro/sucesso */}\n      {formState.successMessage && (\n        <AlertSuccess title={formState.successMessage} />\n      )}\n      {formState.errorMessage && <AlertError title={formState.errorMessage} />}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/new-verification-form.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/reset-password/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { CardAuthWrapper } from \"@/registry/components/auth/card/card-auth-wrapper\"\nimport { ResetPasswordForm } from \"@/registry/components/auth/form/reset-password-form\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"ResetPassword\",\n  description: \"Description ResetPassword.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <CardAuthWrapper headerLabel=\"Enter a new password\">\n        <ResetPasswordForm />\n      </CardAuthWrapper>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/reset-password/page.tsx"
    },
    {
      "path": "src/registry/components/auth/form/reset-password-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useRouter } from \"next/navigation\"\nimport { useEffect, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\n\nimport { sanitizeData } from \"@/utils/sanitize\"\n\nimport { PasswordInput } from \"@/registry/components/layout/form/password-input\"\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\nimport {\n  type ResetPasswordFormValues,\n  resetPasswordSchema,\n} from \"@/validations/auth/reset-password.schema\"\n\n/**\n * Estado do formulário de redefinição de senha\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n * - Validação do token\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n  isValidToken: boolean\n}\n\n/**\n * Formulário de redefinição de senha\n *\n * Implementa o fluxo completo de redefinição com:\n * - Validação de campos\n * - Validação do token\n * - Feedback visual\n * - Tratamento de erros\n * - Logs para auditoria\n */\nexport function ResetPasswordForm() {\n  const router = useRouter()\n\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading, mensagens\n   * de feedback e validação do token.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n    isValidToken: false,\n  })\n\n  /**\n   * Configuração do formulário\n   *\n   * Define valores iniciais e regras de validação\n   * usando o schema Zod para type-safety.\n   */\n  const form = useForm<ResetPasswordFormValues>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n      token: \"\",\n    },\n  })\n\n  /**\n   * Valida o token na montagem do componente\n   *\n   * Verifica se o token existe e é válido\n   * antes de permitir a redefinição.\n   */\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: This hook does not specify its dependency on updateFormState.\n  useEffect(() => {\n    const validateToken = async () => {\n      const token = new URLSearchParams(window.location.search).get(\"token\")\n\n      if (!token) {\n        updateFormState({\n          errorMessage: \"Link de recuperação inválido\",\n          isValidToken: false,\n        })\n        return\n      }\n\n      try {\n        // Validação do token\n        const isValid = token\n\n        // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n\n        if (!isValid) {\n          updateFormState({\n            errorMessage: \"Link de recuperação expirado ou inválido\",\n            isValidToken: false,\n          })\n          return\n        }\n\n        // Atualiza o token no formulário\n        form.setValue(\"token\", token)\n        updateFormState({ isValidToken: true })\n      } catch (error) {\n        // biome-ignore lint/suspicious/noConsole: Don't use console.\n        console.error(\"🚀 ~ validateToken ~ error:\", error)\n\n        updateFormState({\n          errorMessage: \"Erro ao validar link de recuperação\",\n          isValidToken: false,\n        })\n      }\n    }\n\n    validateToken()\n  }, [form])\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o envio do formulário\n   *\n   * Gerencia o fluxo completo de redefinição:\n   * - Validação dos dados\n   * - Sanitização\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  async function onSubmit(data: ResetPasswordFormValues) {\n    try {\n      // Verifica se o token é válido antes de prosseguir\n      if (!formState.isValidToken) {\n        updateFormState({\n          errorMessage: \"Link de recuperação inválido ou expirado\",\n        })\n        return\n      }\n\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      const _token = new URLSearchParams(window.location.search).get(\"token\")\n\n      // Sanitiza dados para prevenir injeção\n      const _sanitizedData = sanitizeData(data, resetPasswordSchema)\n\n      // TODO: Envia dados para redefinição\n      // Simula delay de rede para melhor UX\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n      // Processa redefinição bem-sucedida\n      const successMsg = \"Senha redefinida com sucesso!\"\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Senha Redefinida\", {\n        description: \"Sua senha foi atualizada com sucesso\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Limpa o formulário após sucesso\n      form.reset()\n\n      // Redireciona para login após 2 segundos\n      router.push(\"/auth/sign-in\")\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error\n          ? error.message\n          : \"Erro ao processar redefinição de senha\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  if (!formState.isValidToken) {\n    // Se o token for inválido, exibe apenas a mensagem de erro\n    return (\n      <div className=\"space-y-4\">\n        <AlertError\n          title={formState.errorMessage || \"Link de recuperação inválido\"}\n        />\n        <Button\n          className=\"w-full cursor-pointer\"\n          onClick={() => router.push(\"/auth/forgot-password\")}\n          variant=\"outline\"\n        >\n          Solicitar novo link\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <Form {...form}>\n      <form\n        className=\"space-y-6\"\n        onSubmit={(e) => {\n          form.handleSubmit(onSubmit)(e)\n        }}\n      >\n        {/* Campo de senha - entrada segura com validação */}\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nova Senha</FormLabel>\n              <FormControl>\n                <PasswordInput\n                  {...field}\n                  disabled={formState.isLoading}\n                  placeholder=\"••••••••\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Campo de confirmação de senha */}\n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirmar Nova Senha</FormLabel>\n              <FormControl>\n                <PasswordInput\n                  {...field}\n                  disabled={formState.isLoading}\n                  placeholder=\"••••••••\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Feedback visual - mensagens de erro/sucesso */}\n        {formState.errorMessage && (\n          <AlertError title={formState.errorMessage} />\n        )}\n        {formState.successMessage && (\n          <AlertSuccess title={formState.successMessage} />\n        )}\n\n        {/* Botão de ação - controle do fluxo de redefinição */}\n        <Button\n          className=\"w-full cursor-pointer\"\n          disabled={formState.isLoading}\n          type=\"submit\"\n        >\n          {formState.isLoading ? (\n            <LoadingSpinner className=\"size-4\" />\n          ) : (\n            \"Redefinir Senha\"\n          )}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/reset-password-form.tsx"
    },
    {
      "path": "src/registry/validations/auth/reset-password.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { authBaseSchema, VALIDATION } from \"@/validations/auth/auth-base.schema\"\n\n/**\n * Schema de redefinição de senha\n *\n * Define a estrutura e regras de validação para o processo de\n * redefinição de senha. Garante que a senha e confirmação sejam\n * iguais através de uma validação customizada.\n */\nexport const resetPasswordSchema = z\n  .object({\n    password: authBaseSchema.password,\n    confirmPassword: z.string().min(1, VALIDATION.confirmPassword.required),\n    token: z.string().min(1, VALIDATION.token.required),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: VALIDATION.confirmPassword.mismatch,\n    path: [\"confirmPassword\"],\n  })\n\n/**\n * Tipos derivados dos schemas\n *\n * Define tipos TypeScript derivados dos schemas Zod para garantir\n * type-safety em toda a aplicação. Facilita o uso em formulários\n * e respostas de API.\n */\nexport type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>\n",
      "type": "registry:component",
      "target": "src/validations/auth/reset-password.schema.ts"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/sign-in/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { FormAuth } from \"@/registry/components/auth/form/form-auth\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"Sign in\",\n  description: \"Description Sign in.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <FormAuth />\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/sign-in/page.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/auth/sign-up/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { FormAuth } from \"@/registry/components/auth/form/form-auth\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"Sign up\",\n  description: \"Description Sign up.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <FormAuth activeTab=\"sign-up\" />\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/auth/sign-up/page.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/privacy-policy/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { Typography } from \"@/components/layout/typography\"\n\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"Privacy Policy\",\n  description: \"Description Privacy Policy.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <Typography.H1>Privacy Policy</Typography.H1>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/privacy-policy/page.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/terms-of-service/page.tsx",
      "content": "import type { Metadata } from \"next\"\n\nimport { Typography } from \"@/components/layout/typography\"\n\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport const metadata: Metadata = {\n  title: \"Terms of Service\",\n  description: \"Description Terms of Service.\",\n}\n\nexport default function Page() {\n  return (\n    <Container className=\"flex items-center justify-center py-24 md:py-32\">\n      <Typography.H1>Terms of Service</Typography.H1>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/terms-of-service/page.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/settings/layout.tsx",
      "content": "\"use client\"\n\nimport { SidebarIcon, User2Icon } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport type React from \"react\"\nimport { useState } from \"react\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Container } from \"@/registry/components/shared/container\"\n\nconst userSettingsSidebar = {\n  items: [\n    {\n      id: \"1\",\n      label: \"Profile\",\n      url: \"/settings/profile\",\n    },\n    {\n      id: \"2\",\n      label: \"Account\",\n      url: \"/settings/account\",\n    },\n  ],\n}\n\ntype NavItemProps = {\n  label: string\n  href: string\n  active?: boolean\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n}\n\nfunction NavItem({ label, href, active, onClick }: NavItemProps) {\n  return (\n    <Link\n      className={`flex items-center space-x-3 rounded-md px-3 py-2 font-medium text-base text-muted-foreground transition-colors md:text-sm ${\n        active\n          ? \"border-primary border-l-2 bg-sidebar-accent/40 text-primary\"\n          : \"text-muted-foreground hover:bg-sidebar-accent/40 hover:text-sidebar-foreground\"\n      }`}\n      href={href}\n      onClick={onClick}\n    >\n      <span className=\"truncate\">{label}</span>\n    </Link>\n  )\n}\n\nfunction SidebarContent({\n  onClick,\n}: {\n  onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined\n}) {\n  const pathname = usePathname()\n\n  return (\n    <div className=\"h-full overflow-y-auto py-4\">\n      <div className=\"space-y-4 md:space-y-6\">\n        {/* User Info */}\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-10 w-10 flex-shrink-0 md:h-12 md:w-12\">\n            <AvatarImage src={\"/assets/images/avatar/avatar.jpg\"} />\n            <AvatarFallback className=\"rounded-full\">\n              <User2Icon />\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"min-w-0 flex-1\">\n            <h2 className=\"line-clamp-1 truncate font-semibold text-base md:text-lg\">\n              Admin 01\n            </h2>\n            <p className=\"line-clamp-1 truncate text-muted-foreground text-xs md:text-sm\">\n              admin@email.com\n            </p>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Navigation */}\n        <nav className=\"space-y-1\">\n          <div className=\"space-y-1 pr-4\">\n            {userSettingsSidebar.items.map((item) => (\n              <NavItem\n                active={pathname === item.url}\n                href={item.url}\n                key={item.id}\n                label={item.label}\n                onClick={onClick}\n              />\n            ))}\n          </div>\n        </nav>\n      </div>\n    </div>\n  )\n}\n\nexport default function SettingsLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  return (\n    <Container className=\"flex flex-1 flex-col gap-4 pt-16\" size=\"2xl\">\n      <div className=\"flex\">\n        {/* Mobile Sidebar Settings*/}\n        <Sheet onOpenChange={setSidebarOpen} open={sidebarOpen}>\n          {/* TODO: Reposicionar Trigger mobile Sidebar Settings */}\n          <Button\n            className={cn(\n              \"absolute top-2 left-4 flex h-8 w-8 cursor-pointer text-muted-foreground md:hidden\"\n            )}\n            onClick={() => setSidebarOpen(true)}\n            size=\"icon\"\n            variant=\"ghost\"\n          >\n            <SidebarIcon />\n            <span className=\"sr-only\">Menu Settings</span>\n          </Button>\n          <SheetContent\n            className=\"w-(--sidebar-width) bg-sidebar pl-4 text-sidebar-foreground\"\n            data-mobile=\"true\"\n            data-sidebar=\"sidebar\"\n            data-slot=\"sidebar\"\n            side=\"left\"\n            style={\n              {\n                \"--sidebar-width\": \"18rem\",\n              } as React.CSSProperties\n            }\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Nav Settings</SheetTitle>\n              <SheetDescription>Displays the mobile Settings.</SheetDescription>\n            </SheetHeader>\n            <SidebarContent onClick={() => setSidebarOpen(false)} />\n          </SheetContent>\n        </Sheet>\n\n        {/* Desktop Sidebar */}\n        <div className=\"hidden min-h-screen w-64 border-r md:block\">\n          <SidebarContent />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"w-full flex-1 md:w-auto\">\n          <div className=\"md:pl-4\">\n            <div className=\"mx-auto max-w-full\">{children}</div>\n          </div>\n        </div>\n      </div>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/settings/layout.tsx"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/settings/account/page.tsx",
      "content": "\"use client\"\n\nimport { Typography } from \"@/components/layout/typography\"\nimport { Separator } from \"@/components/ui/separator\"\n\nimport { AccountForm } from \"@/registry/components/auth/form/account-form\"\nimport { AccountImageForm } from \"@/registry/components/auth/form/account-image-form\"\nimport { DeleteAccountForm } from \"@/registry/components/auth/form/delete-account-form\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport default function AccountPage() {\n  return (\n    <Container className=\"py-4\" size=\"full\">\n      <Typography.H1>Account settings</Typography.H1>\n      <div className=\"grid grid-cols-1 gap-6 md:gap-8 xl:grid-cols-3\">\n        <div className=\"space-y-6 xl:col-span-2\">\n          <AccountForm />\n        </div>\n\n        <div className=\"mt-8 xl:col-span-1\">\n          <Separator className=\"block xl:hidden\" />\n          <AccountImageForm />\n        </div>\n\n        <div className=\"space-y-6 xl:col-span-2\">\n          <Separator className=\"my-8\" />\n          <DeleteAccountForm />\n        </div>\n      </div>\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/settings/account/page.tsx"
    },
    {
      "path": "src/registry/components/auth/form/account-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Switch } from \"@/components/ui/switch\"\n\nimport { PasswordInput } from \"@/registry/components/layout/form/password-input\"\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\nimport { AlertError } from \"@/registry/components/shared/alert/alert-error\"\nimport { AlertSuccess } from \"@/registry/components/shared/alert/alert-success\"\nimport {\n  type AccountFormValues,\n  accountSchema,\n} from \"@/validations/auth/account.schema\"\n\n/**\n * Estado do formulário de conta\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  errorMessage: string | null\n  successMessage: string | null\n}\n\n/**\n * Formulário de configurações da conta\n *\n * Implementa o fluxo completo de atualização com:\n * - Validação de campos\n * - Atualização de dados pessoais\n * - Alteração de senha\n * - Configuração de 2FA\n * - Feedback visual\n */\nexport function AccountForm() {\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e mensagens\n   * de feedback durante o processo.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    errorMessage: null,\n    successMessage: null,\n  })\n\n  /**\n   * Configuração do formulário\n   *\n   * Define valores iniciais e regras de validação\n   * usando o schema Zod para type-safety.\n   */\n  const form = useForm<AccountFormValues>({\n    resolver: zodResolver(accountSchema),\n    defaultValues: {\n      name: \"\",\n      lastName: \"\",\n      isTwoFactorEnabled: false,\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  })\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o envio do formulário\n   *\n   * Gerencia o fluxo completo de atualização:\n   * - Validação dos dados\n   * - Envio à API\n   * - Tratamento da resposta\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  async function onSubmit(data: AccountFormValues) {\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n        successMessage: null,\n      })\n\n      // TODO: Envia dados para atualização\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa erro de atualização\n      // if (!result.success) {\n      //   updateFormState({ errorMessage: result.error })\n      //   return\n      // }\n\n      // Processa atualização bem-sucedida\n      const successMsg = \"Conta atualizada com sucesso!\"\n      updateFormState({ successMessage: successMsg })\n\n      // Exibe feedback visual\n      toast.success(\"Conta Atualizada\", {\n        description: `Configurações atualizadas para ${data.name}`,\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Limpa campos de senha após sucesso\n      form.setValue(\"currentPassword\", \"\")\n      form.setValue(\"newPassword\", \"\")\n      form.setValue(\"confirmPassword\", \"\")\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao atualizar conta\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form\n        className=\"mt-8 space-y-6 md:space-y-8\"\n        onSubmit={(e) => {\n          form.handleSubmit(onSubmit)(e)\n        }}\n      >\n        {/* Alteração de Nome */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Alterar nome</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Altere seu nome de exibição.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">\n                    Nome:<span className=\"-ml-2 text-red-600\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={formState.isLoading}\n                      placeholder=\"Digite seu nome\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">\n                    Sobrenome:<span className=\"-ml-2 text-red-600\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={formState.isLoading}\n                      placeholder=\"Digite seu sobrenome\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Segurança da Conta */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Segurança da conta</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Gerencie as configurações de segurança da sua conta.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">\n                    Senha atual:<span className=\"-ml-2 text-red-600\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <PasswordInput\n                      {...field}\n                      disabled={formState.isLoading}\n                      placeholder=\"Digite sua senha atual\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">Nova senha:</FormLabel>\n                  <FormControl>\n                    <PasswordInput\n                      {...field}\n                      disabled={formState.isLoading}\n                      placeholder=\"Digite a nova senha\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">\n                    Confirmar nova senha:\n                  </FormLabel>\n                  <FormControl>\n                    <PasswordInput\n                      {...field}\n                      disabled={formState.isLoading}\n                      placeholder=\"Confirme a nova senha\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Autenticação de Dois Fatores */}\n        <Card>\n          <CardContent>\n            <FormField\n              control={form.control}\n              name=\"isTwoFactorEnabled\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-foreground\">\n                      Autenticação de Dois Fatores\n                    </FormLabel>\n                    <FormDescription>\n                      Ative a autenticação de dois fatores para sua conta\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      className=\"data-[state=checked]:bg-green-600\"\n                      disabled={formState.isLoading}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Mensagens de Erro e Sucesso */}\n        {formState.errorMessage && (\n          <AlertError title={formState.errorMessage} />\n        )}\n        {formState.successMessage && (\n          <AlertSuccess title={formState.successMessage} />\n        )}\n\n        {/* Botão de Envio */}\n        <Button\n          className=\"w-full cursor-pointer bg-green-600 hover:bg-green-700 sm:w-auto\"\n          disabled={formState.isLoading}\n          type=\"submit\"\n        >\n          {formState.isLoading ? (\n            <LoadingSpinner className=\"mr-2 h-4 w-4\" />\n          ) : null}\n          {formState.isLoading ? \"Atualizando...\" : \"Atualizar Conta\"}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/account-form.tsx"
    },
    {
      "path": "src/registry/components/auth/form/account-image-form.tsx",
      "content": "\"use client\"\n\nimport { Upload, User2Icon } from \"lucide-react\"\nimport { useRef, useState } from \"react\"\nimport { toast } from \"sonner\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\n\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\n\n/**\n * Estado do formulário de imagem de conta\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Preview da imagem\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  imageUrl: string | null\n  errorMessage: string | null\n}\n\n/**\n * Formulário de imagem de conta\n *\n * Implementa o fluxo completo de gerenciamento de imagem:\n * - Seleção de arquivo\n * - Preview da imagem\n * - Upload via server action\n * - Remoção da imagem\n * - Feedback visual\n */\nexport function AccountImageForm() {\n  /**\n   * Referência para o input de arquivo\n   *\n   * Permite acionar o seletor de arquivo\n   * programaticamente.\n   */\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e preview\n   * da imagem durante o processo.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    imageUrl: null,\n    errorMessage: null,\n  })\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Processa o upload da imagem\n   *\n   * Gerencia o fluxo completo de upload:\n   * - Validação do arquivo\n   * - Preview da imagem\n   * - Upload via server action\n   * - Feedback ao usuário\n   * - Logs para auditoria\n   */\n  async function handleUpload(event: React.ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0]\n    if (!file) {\n      return\n    }\n\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n      })\n\n      // Cria preview temporário da imagem\n      const imageUrl = URL.createObjectURL(file)\n      updateFormState({ imageUrl })\n\n      // Prepara dados para envio\n      const formData = new FormData()\n      formData.append(\"file\", file)\n\n      // TODO: Envia imagem para upload\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa erro de upload\n      // if (!result.success) {\n      //   updateFormState({ errorMessage: result.error })\n      //   return\n      // }\n\n      // Exibe feedback visual\n      toast.success(\"Imagem atualizada\", {\n        description: \"Sua foto de conta foi atualizada com sucesso.\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error\n          ? error.message\n          : \"Erro ao fazer upload da imagem\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  /**\n   * Processa a remoção da imagem\n   *\n   * Gerencia o fluxo de remoção:\n   * - Confirmação do usuário\n   * - Remoção via server action\n   * - Feedback visual\n   * - Logs para auditoria\n   */\n  async function handleRemove() {\n    try {\n      // Inicia o processo e limpa feedback anterior\n      updateFormState({\n        isLoading: true,\n        errorMessage: null,\n      })\n\n      // TODO: Remove a imagem\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa erro de remoção\n      // if (!result.success) {\n      //   updateFormState({ errorMessage: result.error })\n      //   return\n      // }\n\n      // Limpa preview e estado\n      updateFormState({ imageUrl: null })\n\n      // Exibe feedback visual\n      toast.success(\"Imagem removida\", {\n        description: \"Sua foto de conta foi removida com sucesso.\",\n        classNames: {\n          success: \"!bg-green-200 !text-green-600 dark:!bg-green-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao remover imagem\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <Card className=\"mt-16 xl:mt-0\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Foto de conta</CardTitle>\n        <CardDescription className=\"text-muted-foreground\">\n          Faça upload de uma foto para ajudar outros a reconhecê-lo.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <Avatar className=\"h-32 w-32\">\n            <AvatarImage\n              className=\"object-cover object-center\"\n              src={\n                formState.imageUrl || \"/placeholder.svg?height=128&width=128\"\n              }\n            />\n            <AvatarFallback className=\"rounded-full\">\n              <User2Icon className=\"h-24 w-24\" />\n            </AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex w-full flex-col space-y-2\">\n            <input\n              accept=\"image/jpeg,image/png,image/webp\"\n              className=\"hidden\"\n              onChange={(e) => {\n                handleUpload(e)\n              }}\n              ref={fileInputRef}\n              type=\"file\"\n            />\n\n            <Button\n              className=\"flex cursor-pointer items-center space-x-2\"\n              disabled={formState.isLoading}\n              onClick={() => {\n                fileInputRef.current?.click()\n              }}\n              size=\"sm\"\n              type=\"button\"\n              variant=\"outline\"\n            >\n              {formState.isLoading ? (\n                <LoadingSpinner className=\"h-4 w-4\" />\n              ) : (\n                <Upload className=\"h-4 w-4\" />\n              )}\n              <span>Upload de nova foto</span>\n            </Button>\n\n            <Button\n              className=\"cursor-pointer text-red-600 hover:text-red-300\"\n              disabled={formState.isLoading || !formState.imageUrl}\n              onClick={() => {\n                handleRemove()\n              }}\n              size=\"sm\"\n              type=\"button\"\n              variant=\"ghost\"\n            >\n              Remover foto\n            </Button>\n          </div>\n\n          <p className=\"text-center text-muted-foreground text-xs\">\n            Recomendado: Imagem quadrada, mínimo 400×400px e menos de 2MB.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/account-image-form.tsx"
    },
    {
      "path": "src/registry/components/auth/form/delete-account-form.tsx",
      "content": "\"use client\"\n\nimport { AlertTriangle, Trash2Icon } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { toast } from \"sonner\"\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\n\nimport { LoadingSpinner } from \"@/registry/components/layout/loading/loading-spinner\"\n\n/**\n * Estado do formulário de exclusão\n *\n * Centraliza o controle de UI e feedback do formulário:\n * - Loading durante requisições\n * - Estado do diálogo de confirmação\n * - Mensagens de erro/sucesso\n */\ntype FormState = {\n  isLoading: boolean\n  showDeleteDialog: boolean\n  errorMessage: string | null\n}\n\n/**\n * Formulário de exclusão de conta\n *\n * Implementa o fluxo completo de exclusão com:\n * - Diálogo de confirmação\n * - Validação de permissões\n * - Exclusão via server action\n * - Feedback visual\n * - Redirecionamento após exclusão\n */\nexport function DeleteAccountForm() {\n  /**\n   * Estado inicial do formulário\n   *\n   * Controla o estado de loading e diálogo\n   * durante o processo de exclusão.\n   */\n  const [formState, setFormState] = useState<FormState>({\n    isLoading: false,\n    showDeleteDialog: false,\n    errorMessage: null,\n  })\n\n  /**\n   * Hook de navegação\n   *\n   * Permite redirecionar o usuário após\n   * a exclusão da conta.\n   */\n  const router = useRouter()\n\n  /**\n   * Atualiza o estado do formulário\n   *\n   * Preserva o estado anterior e aplica apenas as\n   * mudanças necessárias de forma segura.\n   */\n  const updateFormState = (updates: Partial<FormState>) => {\n    setFormState((prev) => ({ ...prev, ...updates }))\n  }\n\n  /**\n   * Atualiza o estado do diálogo\n   *\n   * Controla a visibilidade do diálogo de\n   * confirmação de exclusão.\n   */\n  const handleDialogChange = (open: boolean) => {\n    updateFormState({ showDeleteDialog: open })\n  }\n\n  /**\n   * Processa a exclusão da conta\n   *\n   * Gerencia o fluxo completo de exclusão:\n   * - Confirmação do usuário\n   * - Exclusão via server action\n   * - Feedback ao usuário\n   * - Redirecionamento\n   * - Logs para auditoria\n   */\n  async function handleDeleteAccount() {\n    try {\n      // Fecha o diálogo e inicia o processo\n      updateFormState({\n        showDeleteDialog: false,\n        isLoading: true,\n        errorMessage: null,\n      })\n\n      // TODO: Processa a exclusão\n      // biome-ignore lint/style/noMagicNumbers: Magic number detected. Extract it to a constant with a meaningful name.\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Processa erro de exclusão\n      // if (!result.success) {\n      //   updateFormState({ errorMessage: result.error })\n      //   return\n      // }\n\n      // Exibe feedback visual\n      toast.error(\"Conta Excluída\", {\n        description: \"Sua conta foi permanentemente excluída.\",\n        classNames: {\n          error: \"!bg-red-200 !text-red-600 dark:!bg-red-950\",\n          description: \"!text-muted-foreground\",\n        },\n      })\n\n      // Redireciona para a página inicial\n      router.push(\"/\")\n    } catch (error) {\n      // Trata erros inesperados\n      const errorMsg =\n        error instanceof Error ? error.message : \"Erro ao excluir conta\"\n      updateFormState({ errorMessage: errorMsg })\n    } finally {\n      // Finaliza o processo independente do resultado\n      updateFormState({ isLoading: false })\n    }\n  }\n\n  return (\n    <Card className=\"mt-16 border-red-800 bg-red-900\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2 text-lg text-red-500\">\n          <AlertTriangle className=\"h-5 w-5\" />\n          <span>Zona de Perigo</span>\n        </CardTitle>\n        <CardDescription className=\"text-red-200\">\n          Depois de excluir sua conta, não há como voltar atrás. Por favor,\n          tenha certeza.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <AlertDialog\n          onOpenChange={handleDialogChange}\n          open={formState.showDeleteDialog}\n        >\n          <AlertDialogTrigger asChild>\n            <Button\n              className=\"flex w-full cursor-pointer items-center space-x-2 sm:w-auto\"\n              disabled={formState.isLoading}\n              type=\"button\"\n              variant=\"destructive\"\n            >\n              {formState.isLoading ? (\n                <LoadingSpinner className=\"h-4 w-4\" />\n              ) : (\n                <Trash2Icon className=\"h-4 w-4\" />\n              )}\n              <span>Excluir conta</span>\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"flex items-center space-x-2 text-red-500\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                <span>Excluir Conta</span>\n              </AlertDialogTitle>\n              <AlertDialogDescription className=\"text-muted-foreground\">\n                Esta ação não pode ser desfeita. Isso excluirá permanentemente\n                sua conta e removerá todos os seus dados de nossos servidores.\n                <br />\n                <br />\n                <strong className=\"text-red-500\">\n                  Você tem certeza absoluta que deseja excluir sua conta?\n                </strong>\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel className=\"cursor-pointer\">\n                Cancelar\n              </AlertDialogCancel>\n              <AlertDialogAction\n                className=\"cursor-pointer bg-red-600 text-white hover:bg-red-700\"\n                disabled={formState.isLoading}\n                onClick={() => {\n                  handleDeleteAccount()\n                }}\n              >\n                {formState.isLoading ? (\n                  <>\n                    <LoadingSpinner className=\"mr-2 h-4 w-4\" />\n                    Excluindo...\n                  </>\n                ) : (\n                  \"Sim, excluir minha conta\"\n                )}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/form/delete-account-form.tsx"
    },
    {
      "path": "src/registry/validations/auth/account.schema.ts",
      "content": "import { z } from \"zod\"\n\nimport { sanitizePassword } from \"@/utils/sanitize\"\n\nimport { authBaseSchema } from \"@/validations/auth/auth-base.schema\"\n\nconst IMAGE_SIZE = 1024\n\n/**\n * Constantes de validação\n *\n * Centraliza as regras de validação para garantir consistência nas mensagens\n * e facilitar manutenção. Evita duplicação de código e permite alterações\n * centralizadas.\n */\nconst VALIDATION = {\n  currentPassword: {\n    required: \"Senha atual é obrigatória\",\n  },\n  newPassword: {\n    min: 8,\n    max: 100,\n    required: \"Nova senha é obrigatória\",\n    // Regex para garantir senha forte: maiúscula, minúscula, número e caractere especial\n    regex:\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    invalid:\n      \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula, um número e um caractere especial\",\n  },\n  confirmPassword: {\n    required: \"Confirmação de senha é obrigatória\",\n    mismatch: \"As senhas não conferem\",\n  },\n  accountImage: {\n    maxSize: 2 * IMAGE_SIZE * IMAGE_SIZE, // 2MB\n    maxSizeMessage: \"A imagem deve ter no máximo 2MB\",\n    allowedTypes: [\"image/jpeg\", \"image/png\", \"image/webp\"],\n    invalidType: \"Formato de imagem não suportado. Use JPG, PNG ou WebP.\",\n  },\n}\n\n/**\n * Schema de atualização de conta\n *\n * Define a estrutura e regras de validação para atualização dos dados\n * da conta do usuário. Inclui validação de senha atual e nova senha,\n * além de suporte para configuração de 2FA.\n */\nexport const accountSchema = z\n  .object({\n    name: authBaseSchema.name,\n    lastName: authBaseSchema.lastName,\n    isTwoFactorEnabled: z.optional(z.boolean()),\n    currentPassword: z.string().min(1, VALIDATION.currentPassword.required),\n    newPassword: z\n      .string()\n      .min(1, VALIDATION.newPassword.required)\n      .regex(VALIDATION.newPassword.regex, VALIDATION.newPassword.invalid)\n      .min(\n        VALIDATION.newPassword.min,\n        `Senha deve ter no mínimo ${VALIDATION.newPassword.min} caracteres`\n      )\n      .max(\n        VALIDATION.newPassword.max,\n        `Senha deve ter no máximo ${VALIDATION.newPassword.max} caracteres`\n      )\n      .transform(sanitizePassword)\n      .optional(),\n    confirmPassword: z.string().optional(),\n  })\n  .refine(\n    (data) => {\n      if (data.newPassword && data.newPassword !== data.confirmPassword) {\n        return false\n      }\n      return true\n    },\n    {\n      message: VALIDATION.confirmPassword.mismatch,\n      path: [\"confirmPassword\"],\n    }\n  )\n\n/**\n * Schema de validação para imagem de conta\n *\n * Define as regras para upload de imagens:\n * - Tipos permitidos: jpeg, png, webp\n * - Tamanho máximo: 2MB\n * - Dimensões mínimas: 400x400px\n */\nexport const accountImageSchema = z.object({\n  file: z.instanceof(File),\n  size: z\n    .number()\n    .max(\n      VALIDATION.accountImage.maxSize,\n      VALIDATION.accountImage.maxSizeMessage\n    ),\n  type: z\n    .string()\n    .refine(\n      (type) => VALIDATION.accountImage.allowedTypes.includes(type),\n      VALIDATION.accountImage.invalidType\n    ),\n})\n\n/**\n * Tipo derivado do schema\n *\n * Define o tipo TypeScript derivado do schema Zod para garantir\n * type-safety em toda a aplicação. Facilita o uso em formulários\n * e respostas de API.\n */\nexport type AccountFormValues = z.infer<typeof accountSchema>\nexport type AccountImageFormValues = z.infer<typeof accountImageSchema>\n",
      "type": "registry:component",
      "target": "src/validations/auth/account.schema.ts"
    },
    {
      "path": "src/registry/examples/adminsys-auth/app/(home)/settings/profile/page.tsx",
      "content": "\"use client\"\n\nimport { CardUserProfile } from \"@/registry/components/auth/card/card-user-profile\"\nimport { Container } from \"@/registry/components/shared/container\"\n\nexport default function Page() {\n  return (\n    <Container className=\"py-4\" size=\"full\">\n      <CardUserProfile\n        email={\"admin@email.com\"}\n        image={\"/assets/images/avatar/avatar.jpg\"}\n        name={\"Admin 01\"}\n      />\n    </Container>\n  )\n}\n",
      "type": "registry:file",
      "target": "src/app/(home)/settings/profile/page.tsx"
    },
    {
      "path": "src/registry/components/auth/card/card-user-profile.tsx",
      "content": "import { User } from \"lucide-react\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\n\nexport type CardUserProfileProps = {\n  name: string\n  email: string\n  image: string\n}\n\nexport function CardUserProfile({ name, email, image }: CardUserProfileProps) {\n  return (\n    <Card className=\"w-full rounded-lg border-0 bg-muted/20\">\n      <CardHeader className=\"p-0\">\n        <div className=\"h-32 rounded-t-lg bg-[radial-gradient(ellipse_at_bottom,_var(--tw-gradient-stops))] from-primary/10 via-primary/0 to-background\" />\n      </CardHeader>\n      <CardContent className=\"relative px-4 pt-16 pb-8 sm:px-6 lg:px-8\">\n        <Avatar className=\"-top-16 -translate-x-1/2 absolute left-1/2 size-32 shadow-md\">\n          {image && <AvatarImage alt=\"User profile picture\" src={image} />}\n          <AvatarFallback>\n            <User className=\"size-20\" />\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"text-center\">\n          <h2 className=\"font-bold text-2xl\">{name}</h2>\n          <p className=\"text-muted-foreground\">{email}</p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/auth/card/card-user-profile.tsx"
    }
  ]
}