{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-data-table",
  "type": "registry:hook",
  "title": "Mobile State Hook",
  "dependencies": ["@tanstack/react-table", "use-debounce"],
  "files": [
    {
      "path": "src/registry/hooks/use-data-table.ts",
      "content": "import type {\n  OnChangeFn,\n  SortingState,\n  VisibilityState,\n} from \"@tanstack/react-table\"\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { useDebounce } from \"use-debounce\"\n\nconst DEBOUNCE_DELAY_MS = 500\n\n/**\n * Hook customizado para gerenciar o estado e a lógica de tabelas de dados (data tables).\n * Sincroniza o estado da tabela (paginação, ordenação, filtros, visibilidade de colunas) com os parâmetros da URL.\n */\nexport function useDataTable() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  const page = Number(searchParams.get(\"page\")) || 1\n  const perPage = Number(searchParams.get(\"per_page\")) || 10\n  const sortParam = searchParams.get(\"sort\")\n  const nameParam = searchParams.get(\"name\") || \"\"\n  const columnVisibilityParam = searchParams.get(\"column_visibility\")\n  const filterParamsParam = searchParams.get(\"filters\") || \"\"\n\n  const [name, setNameState] = useState(nameParam)\n  const [filterParams, setFilterParamsState] = useState(filterParamsParam)\n  const [debouncedName] = useDebounce(name, DEBOUNCE_DELAY_MS)\n  const [debouncedFilterParams] = useDebounce(filterParams, DEBOUNCE_DELAY_MS)\n\n  const createQueryString = useCallback(\n    (params: Record<string, string | number | null>) => {\n      const newSearchParams = new URLSearchParams(searchParams?.toString())\n\n      for (const [key, value] of Object.entries(params)) {\n        if (value === null) {\n          newSearchParams.delete(key)\n        } else {\n          newSearchParams.set(key, String(value))\n        }\n      }\n\n      return newSearchParams.toString()\n    },\n    [searchParams]\n  )\n\n  useEffect(() => {\n    if (debouncedName !== nameParam) {\n      router.replace(\n        `${pathname}?${createQueryString({ name: debouncedName, page: 1 })}`\n      )\n    }\n  }, [debouncedName, nameParam, pathname, router, createQueryString])\n\n  useEffect(() => {\n    if (debouncedFilterParams !== filterParamsParam) {\n      router.replace(\n        `${pathname}?${createQueryString({ filters: debouncedFilterParams, page: 1 })}`\n      )\n    }\n  }, [\n    debouncedFilterParams,\n    filterParamsParam,\n    pathname,\n    router,\n    createQueryString,\n  ])\n\n  const setPage = (newPage: number) => {\n    router.replace(`${pathname}?${createQueryString({ page: newPage })}`)\n  }\n\n  const setPerPage = (newPerPage: number) => {\n    router.replace(`${pathname}?${createQueryString({ per_page: newPerPage })}`)\n  }\n\n  const setSort = (newSort: SortingState) => {\n    const sortFormatted = newSort\n      .map((s) => `${s.id}.${s.desc ? \"desc\" : \"asc\"}`)\n      .join(\",\")\n    router.replace(`${pathname}?${createQueryString({ sort: sortFormatted })}`)\n  }\n\n  const setName = (newName: string) => {\n    setNameState(newName)\n  }\n\n  const setFilterParams = (newFilterParams: string) => {\n    setFilterParamsState(newFilterParams)\n  }\n\n  const setColumnVisibility: OnChangeFn<VisibilityState> = (updater) => {\n    const newVisibility =\n      typeof updater === \"function\" ? updater(columnVisibility) : updater\n    router.replace(\n      `${pathname}?${createQueryString({\n        column_visibility: JSON.stringify(newVisibility),\n      })}`\n    )\n  }\n\n  const sort: SortingState = sortParam\n    ? sortParam.split(\",\").map((s) => {\n        const [id, dir] = s.split(\".\")\n        return { id, desc: dir === \"desc\" }\n      })\n    : []\n\n  const columnVisibility: VisibilityState =\n    columnVisibilityParam && columnVisibilityParam !== \"undefined\"\n      ? (() => {\n          try {\n            return JSON.parse(columnVisibilityParam)\n          } catch (_e) {\n            return {}\n          }\n        })()\n      : {}\n\n  return {\n    page,\n    perPage,\n    sort,\n    name,\n    filterParams,\n    columnVisibility,\n    setPage,\n    setPerPage,\n    setSort,\n    setName,\n    setFilterParams,\n    setColumnVisibility,\n  }\n}\n",
      "type": "registry:hook",
      "target": "src/hooks/use-data-table.ts"
    }
  ]
}
