{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sanitize",
  "type": "registry:lib",
  "title": "Sanitize Functions",
  "author": "MaskSysDev <https://github.com/MaskSysDev>",
  "dependencies": ["zod"],
  "files": [
    {
      "path": "src/registry/utils/sanitize.ts",
      "content": "import { z } from \"zod\"\n\n/**\n * Utilitários para sanitização de dados\n *\n * Implementa funções para limpar e padronizar diferentes tipos de dados:\n * - Strings (removendo caracteres especiais)\n * - Emails (padronizando formato)\n * - Nomes (formatando corretamente)\n * - Senhas (preservando caracteres especiais)\n * - Dados de formulário (validação e sanitização)\n * - Respostas de API (validação e sanitização)\n */\n\n// Lista de caracteres permitidos em regex\nconst ALLOWED_CHARS = {\n  // Caracteres básicos\n  basic: \"a-zA-Z0-9\",\n  // Espaços e hífens\n  spacing: \"\\\\s\\\\-\",\n  // Acentos e caracteres especiais da língua portuguesa\n  accents: \"áàâãéêíóõôúçÁÀÂÃÉÊÍÓÕÔÚÇ^~´`\",\n  // Caracteres não permitidos (usados em código)\n  forbidden: \"{}()[]<>=\\\\+*/\\\\|&%$#@!?;:\\\"'\",\n}\n\n/**\n * Sanitiza uma string removendo caracteres especiais e espaços extras\n *\n * Mantém apenas:\n * - Letras e números\n * - Espaços simples\n * - Hífens\n * - Acentos e caracteres especiais da língua portuguesa\n *\n * Exemplos:\n * - \"João Paulo\" -> \"João Paulo\"\n * - \"José-Maria\" -> \"José-Maria\"\n * - \"Café com Leite\" -> \"Café com Leite\"\n * - \"Maria da Conceição\" -> \"Maria da Conceição\"\n * - \"José da Silva Júnior\" -> \"José da Silva Júnior\"\n */\nexport function sanitizeString(value: string): string {\n  const allowedChars = `${ALLOWED_CHARS.basic}${ALLOWED_CHARS.spacing}${ALLOWED_CHARS.accents}`\n\n  return value\n    .trim()\n    .replace(/\\s+/g, \" \") // Remove espaços extras\n    .replace(new RegExp(`[^${allowedChars}]`, \"g\"), \"\") // Remove caracteres não permitidos\n}\n\n/**\n * Sanitiza um email removendo espaços e convertendo para minúsculas\n *\n * Garante que o email esteja em um formato consistente:\n * - Sem espaços no início ou fim\n * - Todo em minúsculas\n */\nexport function sanitizeEmail(value: string): string {\n  return value.trim().toLowerCase()\n}\n\n/**\n * Sanitiza os dados de entrada de acordo com o schema fornecido\n *\n * Processo de sanitização:\n * 1. Converte FormData para objeto se necessário\n * 2. Sanitiza strings (exceto senhas)\n * 3. Valida contra o schema Zod\n * 4. Retorna dados sanitizados e validados\n */\nexport function sanitizeData<T extends z.ZodType>(\n  data: unknown,\n  schema: T\n): z.infer<T> {\n  try {\n    // Se for um FormData, converte para objeto\n    if (data instanceof FormData) {\n      const obj: Record<string, string> = {}\n      data.forEach((value, key) => {\n        obj[key] = value.toString()\n      })\n      // biome-ignore lint/style/noParameterAssign: Assigning a function parameter is confusing.\n      data = obj\n    }\n\n    // Sanitiza strings antes da validação, exceto campos de senha\n    if (typeof data === \"object\" && data !== null) {\n      // biome-ignore lint/complexity/noForEach: Prefer for...of instead of forEach.\n      Object.entries(data).forEach(([key, value]) => {\n        if (typeof value === \"string\") {\n          if (key.toLowerCase().includes(\"email\")) {\n            ;(data as Record<string, unknown>)[key] = sanitizeEmail(value)\n          } else if (!key.toLowerCase().includes(\"password\")) {\n            ;(data as Record<string, unknown>)[key] = sanitizeString(value)\n          }\n        }\n      })\n    }\n\n    return schema.parse(data)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `Validation error: ${error.issues.map((e) => e.message).join(\", \")}`\n      )\n    }\n    throw error\n  }\n}\n\n/**\n * Sanitiza a resposta da API de acordo com o schema fornecido\n *\n * Garante que a resposta da API:\n * 1. Segue o formato esperado\n * 2. Contém todos os campos necessários\n * 3. Tem os tipos corretos\n */\nexport function sanitizeResponse<T extends z.ZodType>(\n  response: unknown,\n  schema: T\n): z.infer<T> {\n  try {\n    return schema.parse(response)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `Response validation error: ${error.issues.map((e) => e.message).join(\", \")}`\n      )\n    }\n    throw error\n  }\n}\n\n/**\n * Sanitiza um nome removendo caracteres especiais e formatando corretamente\n *\n * Aplica as seguintes regras:\n * 1. Remove caracteres especiais (exceto caracteres da língua portuguesa)\n * 2. Remove espaços extras\n * 3. Primeira letra de cada palavra em maiúscula\n *\n * Exemplos:\n * - \"joão paulo\" -> \"João Paulo\"\n * - \"josé-maria\" -> \"José-Maria\"\n * - \"café-com-leite\" -> \"Café-Com-Leite\"\n * - \"maria da conceição\" -> \"Maria Da Conceição\"\n * - \"josé da silva júnior\" -> \"José Da Silva Júnior\"\n */\nexport function sanitizeName(name: string): string {\n  // Primeiro sanitiza a string usando a função sanitizeString\n  const sanitized = sanitizeString(name)\n\n  return sanitized\n    .replace(/^\\p{L}/gu, (letter) => letter.toUpperCase()) // Primeira letra maiúscula\n    .replace(/\\s\\p{L}/gu, (letter) => letter.toUpperCase()) // Primeira letra de cada palavra maiúscula\n}\n\n/**\n * Sanitiza uma senha removendo espaços extras\n *\n * Preserva:\n * - Caracteres especiais\n * - Case-sensitivity\n * - Espaços internos\n *\n * Remove apenas:\n * - Espaços no início e fim\n */\nexport function sanitizePassword(password: string): string {\n  // Remove espaços extras, mas mantém a senha exatamente como foi digitada\n  // para preservar caracteres especiais e case-sensitivity\n  return password.trim()\n}\n",
      "type": "registry:lib",
      "target": "src/utils/sanitize.ts"
    }
  ]
}
