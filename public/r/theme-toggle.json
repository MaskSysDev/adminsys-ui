{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-toggle",
  "type": "registry:component",
  "title": "theme-toggle",
  "author": "MaskSysDev <https://github.com/MaskSysDev>",
  "description": "A theme-toggle component with next-themes and Tailwind CSS, supporting system, light, and dark modes.",
  "dependencies": ["next-themes"],
  "files": [
    {
      "path": "src/registry/components/layout/toggle/theme-toggle.tsx",
      "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { Airplay, Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\nimport { type HTMLAttributes, useLayoutEffect, useState } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst itemVariants = cva(\"size-6.5 rounded-full p-1.5 text-muted-foreground\", {\n  variants: {\n    active: {\n      true: \"bg-accent text-accent-foreground\",\n      false: \"text-muted-foreground\",\n    },\n  },\n})\n\nconst full = [\n  [\"light\", Sun] as const,\n  [\"dark\", Moon] as const,\n  [\"system\", Airplay] as const,\n]\n\nexport function ThemeToggle({\n  className,\n  mode = \"light-dark\",\n  ...props\n}: HTMLAttributes<HTMLElement> & {\n  mode?: \"light-dark\" | \"light-dark-system\"\n}) {\n  const { setTheme, theme, resolvedTheme } = useTheme()\n  const [mounted, setMounted] = useState(false)\n\n  useLayoutEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const container = cn(\n    \"inline-flex items-center rounded-full border p-1\",\n    className\n  )\n\n  if (mode === \"light-dark\") {\n    const value = mounted ? resolvedTheme : null\n\n    return (\n      <button\n        aria-label={\"Toggle Theme\"}\n        className={container}\n        data-theme-toggle=\"\"\n        onClick={() => setTheme(value === \"light\" ? \"dark\" : \"light\")}\n        {...props}\n      >\n        {/** biome-ignore lint/suspicious/useIterableCallbackReturn: This callback passed to map() iterable method should always return a value. */}\n        {full.map(([key, Icon]) => {\n          if (key === \"system\") {\n            return\n          }\n\n          return (\n            <Icon\n              className={cn(itemVariants({ active: value === key }))}\n              fill=\"currentColor\"\n              key={key}\n            />\n          )\n        })}\n      </button>\n    )\n  }\n\n  const value = mounted ? theme : null\n\n  return (\n    <div className={container} data-theme-toggle=\"\" {...props}>\n      {full.map(([key, Icon]) => (\n        <button\n          aria-label={key}\n          className={cn(itemVariants({ active: value === key }))}\n          key={key}\n          onClick={() => setTheme(key)}\n          type=\"button\"\n        >\n          <Icon className=\"size-full\" fill=\"currentColor\" />\n        </button>\n      ))}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/layout/toggle/theme-toggle.tsx"
    }
  ],
  "docs": "http://localhost:3000/docs/components/layout/toggle#toggle-theme"
}
